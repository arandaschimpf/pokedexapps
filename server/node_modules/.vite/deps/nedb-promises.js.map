{
  "version": 3,
  "sources": ["browser-external:events", "../../@seald-io/nedb/lib/utils.js", "../../@seald-io/nedb/lib/model.js", "../../@seald-io/nedb/lib/cursor.js", "../../@seald-io/nedb/browser-version/lib/customUtils.js", "../../@seald-io/nedb/lib/waterfall.js", "../../@seald-io/nedb/lib/executor.js", "../../@seald-io/binary-search-tree/lib/customUtils.js", "../../@seald-io/binary-search-tree/lib/bst.js", "../../@seald-io/binary-search-tree/lib/avltree.js", "../../@seald-io/binary-search-tree/index.js", "../../@seald-io/nedb/lib/indexes.js", "../../@seald-io/nedb/browser-version/lib/byline.js", "../../localforage/dist/localforage.js", "../../@seald-io/nedb/browser-version/lib/storage.browser.js", "../../@seald-io/nedb/lib/persistence.js", "../../@seald-io/nedb/lib/datastore.js", "../../@seald-io/nedb/index.js", "../../nedb-promises/src/Cursor.js", "../../nedb-promises/src/Datastore.js", "../../nedb-promises/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"events\" has been externalized for browser compatibility. Cannot access \"events.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/**\n * Utility functions for all environments.\n * This replaces the underscore dependency.\n *\n * @module utils\n * @private\n */\n\n/**\n * @callback IterateeFunction\n * @param {*} arg\n * @return {*}\n */\n\n/**\n * Produces a duplicate-free version of the array, using === to test object equality. In particular only the first\n * occurrence of each value is kept. If you want to compute unique items based on a transformation, pass an iteratee\n * function.\n *\n * Heavily inspired by {@link https://underscorejs.org/#uniq}.\n * @param {Array} array\n * @param {IterateeFunction} [iteratee] transformation applied to every element before checking for duplicates. This will not\n * transform the items in the result.\n * @return {Array}\n * @alias module:utils.uniq\n */\nconst uniq = (array, iteratee) => {\n  if (iteratee) return [...(new Map(array.map(x => [iteratee(x), x]))).values()]\n  else return [...new Set(array)]\n}\n/**\n * Returns true if arg is an Object. Note that JavaScript arrays and functions are objects, while (normal) strings\n * and numbers are not.\n *\n * Heavily inspired by {@link https://underscorejs.org/#isObject}.\n * @param {*} arg\n * @return {boolean}\n */\nconst isObject = arg => typeof arg === 'object' && arg !== null\n\n/**\n * Returns true if d is a Date.\n *\n * Heavily inspired by {@link https://underscorejs.org/#isDate}.\n * @param {*} d\n * @return {boolean}\n * @alias module:utils.isDate\n */\nconst isDate = d => isObject(d) && Object.prototype.toString.call(d) === '[object Date]'\n\n/**\n * Returns true if re is a RegExp.\n *\n * Heavily inspired by {@link https://underscorejs.org/#isRegExp}.\n * @param {*} re\n * @return {boolean}\n * @alias module:utils.isRegExp\n */\nconst isRegExp = re => isObject(re) && Object.prototype.toString.call(re) === '[object RegExp]'\n\n/**\n * Return a copy of the object filtered using the given keys.\n *\n * @param {object} object\n * @param {string[]} keys\n * @return {object}\n */\nconst pick = (object, keys) => {\n  return keys.reduce((obj, key) => {\n    if (object && Object.prototype.hasOwnProperty.call(object, key)) {\n      obj[key] = object[key]\n    }\n    return obj\n  }, {})\n}\n\nconst filterIndexNames = (indexNames) => ([k, v]) => !!(typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || isDate(v) || v === null) &&\nindexNames.includes(k)\n\nmodule.exports.uniq = uniq\nmodule.exports.isDate = isDate\nmodule.exports.isRegExp = isRegExp\nmodule.exports.pick = pick\nmodule.exports.filterIndexNames = filterIndexNames\n", "/**\n * Handle models (i.e. docs)\n * Serialization/deserialization\n * Copying\n * Querying, update\n * @module model\n * @private\n */\nconst { uniq, isDate, isRegExp } = require('./utils.js')\n\n/**\n * Check a key, throw an error if the key is non valid\n * @param {string} k key\n * @param {document} v value, needed to treat the Date edge case\n * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }\n * Its serialized-then-deserialized version it will transformed into a Date object\n * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...\n * @private\n */\nconst checkKey = (k, v) => {\n  if (typeof k === 'number') k = k.toString()\n\n  if (\n    k[0] === '$' &&\n    !(k === '$$date' && typeof v === 'number') &&\n    !(k === '$$deleted' && v === true) &&\n    !(k === '$$indexCreated') &&\n    !(k === '$$indexRemoved')\n  ) throw new Error('Field names cannot begin with the $ character')\n\n  if (k.indexOf('.') !== -1) throw new Error('Field names cannot contain a .')\n}\n\n/**\n * Check a DB object and throw an error if it's not valid\n * Works by applying the above checkKey function to all fields recursively\n * @param {document|document[]} obj\n * @alias module:model.checkObject\n */\nconst checkObject = obj => {\n  if (Array.isArray(obj)) {\n    obj.forEach(o => {\n      checkObject(o)\n    })\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    for (const k in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, k)) {\n        checkKey(k, obj[k])\n        checkObject(obj[k])\n      }\n    }\n  }\n}\n\n/**\n * Serialize an object to be persisted to a one-line string\n * For serialization/deserialization, we use the native JSON parser and not eval or Function\n * That gives us less freedom but data entered in the database may come from users\n * so eval and the like are not safe\n * Accepted primitive types: Number, String, Boolean, Date, null\n * Accepted secondary types: Objects, Arrays\n * @param {document} obj\n * @return {string}\n * @alias module:model.serialize\n */\nconst serialize = obj => {\n  return JSON.stringify(obj, function (k, v) {\n    checkKey(k, v)\n\n    if (v === undefined) return undefined\n    if (v === null) return null\n\n    // Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).\n    // We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this\n    if (typeof this[k].getTime === 'function') return { $$date: this[k].getTime() }\n\n    return v\n  })\n}\n\n/**\n * From a one-line representation of an object generate by the serialize function\n * Return the object itself\n * @param {string} rawData\n * @return {document}\n * @alias module:model.deserialize\n */\nconst deserialize = rawData => JSON.parse(rawData, function (k, v) {\n  if (k === '$$date') return new Date(v)\n  if (\n    typeof v === 'string' ||\n    typeof v === 'number' ||\n    typeof v === 'boolean' ||\n    v === null\n  ) return v\n  if (v && v.$$date) return v.$$date\n\n  return v\n})\n\n/**\n * Deep copy a DB object\n * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields\n * where the keys are valid, i.e. don't begin with $ and don't contain a .\n * @param {?document} obj\n * @param {boolean} [strictKeys=false]\n * @return {?document}\n * @alias module:modelel:(.*)\n */\nfunction deepCopy (obj, strictKeys) {\n  if (\n    typeof obj === 'boolean' ||\n    typeof obj === 'number' ||\n    typeof obj === 'string' ||\n    obj === null ||\n    (isDate(obj))\n  ) return obj\n\n  if (Array.isArray(obj)) return obj.map(o => deepCopy(o, strictKeys))\n\n  if (typeof obj === 'object') {\n    const res = {}\n    for (const k in obj) {\n      if (\n        Object.prototype.hasOwnProperty.call(obj, k) &&\n        (!strictKeys || (k[0] !== '$' && k.indexOf('.') === -1))\n      ) {\n        res[k] = deepCopy(obj[k], strictKeys)\n      }\n    }\n    return res\n  }\n\n  return undefined // For now everything else is undefined. We should probably throw an error instead\n}\n\n/**\n * Tells if an object is a primitive type or a \"real\" object\n * Arrays are considered primitive\n * @param {*} obj\n * @return {boolean}\n * @alias module:modelel:(.*)\n */\nconst isPrimitiveType = obj => (\n  typeof obj === 'boolean' ||\n  typeof obj === 'number' ||\n  typeof obj === 'string' ||\n  obj === null ||\n  isDate(obj) ||\n  Array.isArray(obj)\n)\n\n/**\n * Utility functions for comparing things\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n * @param {number|string|boolean} a\n * @param {number|string|boolean} b\n * @return {number} 0 if a == b, 1 i a > b, -1 if a < b\n * @private\n */\nconst compareNSB = (a, b) => {\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/**\n * Utility function for comparing array\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n * @param {Array} a\n * @param {Array} b\n * @return {number} 0 if arrays have the same length and all elements equal one another. Else either 1 or -1.\n * @private\n */\nconst compareArrays = (a, b) => {\n  const minLength = Math.min(a.length, b.length)\n  for (let i = 0; i < minLength; i += 1) {\n    const comp = compareThings(a[i], b[i])\n\n    if (comp !== 0) return comp\n  }\n\n  // Common section was identical, longest one wins\n  return compareNSB(a.length, b.length)\n}\n\n/**\n * Compare { things U undefined }\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * We need to compare with undefined as it will be used in indexes\n * In the case of objects and arrays, we deep-compare\n * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects\n * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)\n * @param {*} a\n * @param {*} b\n * @param {compareStrings} [_compareStrings] String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)\n * @return {number}\n * @alias module:model.compareThings\n */\nconst compareThings = (a, b, _compareStrings) => {\n  const compareStrings = _compareStrings || compareNSB\n\n  // undefined\n  if (a === undefined) return b === undefined ? 0 : -1\n  if (b === undefined) return 1 // no need to test if a === undefined\n\n  // null\n  if (a === null) return b === null ? 0 : -1\n  if (b === null) return 1 // no need to test if a === null\n\n  // Numbers\n  if (typeof a === 'number') return typeof b === 'number' ? compareNSB(a, b) : -1\n  if (typeof b === 'number') return typeof a === 'number' ? compareNSB(a, b) : 1\n\n  // Strings\n  if (typeof a === 'string') return typeof b === 'string' ? compareStrings(a, b) : -1\n  if (typeof b === 'string') return typeof a === 'string' ? compareStrings(a, b) : 1\n\n  // Booleans\n  if (typeof a === 'boolean') return typeof b === 'boolean' ? compareNSB(a, b) : -1\n  if (typeof b === 'boolean') return typeof a === 'boolean' ? compareNSB(a, b) : 1\n\n  // Dates\n  if (isDate(a)) return isDate(b) ? compareNSB(a.getTime(), b.getTime()) : -1\n  if (isDate(b)) return isDate(a) ? compareNSB(a.getTime(), b.getTime()) : 1\n\n  // Arrays (first element is most significant and so on)\n  if (Array.isArray(a)) return Array.isArray(b) ? compareArrays(a, b) : -1\n  if (Array.isArray(b)) return Array.isArray(a) ? compareArrays(a, b) : 1\n\n  // Objects\n  const aKeys = Object.keys(a).sort()\n  const bKeys = Object.keys(b).sort()\n\n  for (let i = 0; i < Math.min(aKeys.length, bKeys.length); i += 1) {\n    const comp = compareThings(a[aKeys[i]], b[bKeys[i]])\n\n    if (comp !== 0) return comp\n  }\n\n  return compareNSB(aKeys.length, bKeys.length)\n}\n\n// ==============================================================\n// Updating documents\n// ==============================================================\n\n/**\n * @callback modifierFunction\n * The signature of modifier functions is as follows\n * Their structure is always the same: recursively follow the dot notation while creating\n * the nested documents if needed, then apply the \"last step modifier\"\n * @param {Object} obj The model to modify\n * @param {String} field Can contain dots, in that case that means we will set a subfield recursively\n * @param {document} value\n */\n\n/**\n * Create the complete modifier function\n * @param {modifierFunction} lastStepModifierFunction a lastStepModifierFunction\n * @param {boolean} [unset = false] Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented\n * @return {modifierFunction}\n * @private\n */\nconst createModifierFunction = (lastStepModifierFunction, unset = false) => (obj, field, value) => {\n  const func = (obj, field, value) => {\n    const fieldParts = typeof field === 'string' ? field.split('.') : field\n\n    if (fieldParts.length === 1) lastStepModifierFunction(obj, field, value)\n    else {\n      if (obj[fieldParts[0]] === undefined) {\n        if (unset) return\n        obj[fieldParts[0]] = {}\n      }\n      func(obj[fieldParts[0]], fieldParts.slice(1), value)\n    }\n  }\n  return func(obj, field, value)\n}\n\nconst $addToSetPartial = (obj, field, value) => {\n  // Create the array if it doesn't exist\n  if (!Object.prototype.hasOwnProperty.call(obj, field)) { obj[field] = [] }\n\n  if (!Array.isArray(obj[field])) throw new Error('Can\\'t $addToSet an element on non-array values')\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length > 1) throw new Error('Can\\'t use another field in conjunction with $each')\n    if (!Array.isArray(value.$each)) throw new Error('$each requires an array value')\n\n    value.$each.forEach(v => {\n      $addToSetPartial(obj, field, v)\n    })\n  } else {\n    let addToSet = true\n    obj[field].forEach(v => {\n      if (compareThings(v, value) === 0) addToSet = false\n    })\n    if (addToSet) obj[field].push(value)\n  }\n}\n\n/**\n * @enum {modifierFunction}\n */\nconst modifierFunctions = {\n  /**\n   * Set a field to a new value\n   */\n  $set: createModifierFunction((obj, field, value) => {\n    obj[field] = value\n  }),\n  /**\n   * Unset a field\n   */\n  $unset: createModifierFunction((obj, field, value) => {\n    delete obj[field]\n  }, true),\n  /**\n   * Updates the value of the field, only if specified field is smaller than the current value of the field\n   */\n  $min: createModifierFunction((obj, field, value) => {\n    if (typeof obj[field] === 'undefined') obj[field] = value\n    else if (value < obj[field]) obj[field] = value\n  }),\n  /**\n   * Updates the value of the field, only if specified field is greater than the current value of the field\n   */\n  $max: createModifierFunction((obj, field, value) => {\n    if (typeof obj[field] === 'undefined') obj[field] = value\n    else if (value > obj[field]) obj[field] = value\n  }),\n  /**\n   * Increment a numeric field's value\n   */\n  $inc: createModifierFunction((obj, field, value) => {\n    if (typeof value !== 'number') throw new Error(`${value} must be a number`)\n\n    if (typeof obj[field] !== 'number') {\n      if (!Object.prototype.hasOwnProperty.call(obj, field)) obj[field] = value\n      else throw new Error('Don\\'t use the $inc modifier on non-number fields')\n    } else obj[field] += value\n  }),\n  /**\n   * Removes all instances of a value from an existing array\n   */\n  $pull: createModifierFunction((obj, field, value) => {\n    if (!Array.isArray(obj[field])) throw new Error('Can\\'t $pull an element from non-array values')\n\n    const arr = obj[field]\n    for (let i = arr.length - 1; i >= 0; i -= 1) {\n      if (match(arr[i], value)) arr.splice(i, 1)\n    }\n  }),\n  /**\n   * Remove the first or last element of an array\n   */\n  $pop: createModifierFunction((obj, field, value) => {\n    if (!Array.isArray(obj[field])) throw new Error('Can\\'t $pop an element from non-array values')\n    if (typeof value !== 'number') throw new Error(`${value} isn't an integer, can't use it with $pop`)\n    if (value === 0) return\n\n    if (value > 0) obj[field] = obj[field].slice(0, obj[field].length - 1)\n    else obj[field] = obj[field].slice(1)\n  }),\n  /**\n   * Add an element to an array field only if it is not already in it\n   * No modification if the element is already in the array\n   * Note that it doesn't check whether the original array contains duplicates\n   */\n  $addToSet: createModifierFunction($addToSetPartial),\n  /**\n   * Push an element to the end of an array field\n   * Optional modifier $each instead of value to push several values\n   * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/\n   * Difference with MongoDB: if $slice is specified and not $each, we act as if value is an empty array\n   */\n  $push: createModifierFunction((obj, field, value) => {\n    // Create the array if it doesn't exist\n    if (!Object.prototype.hasOwnProperty.call(obj, field)) obj[field] = []\n\n    if (!Array.isArray(obj[field])) throw new Error('Can\\'t $push an element on non-array values')\n\n    if (\n      value !== null &&\n      typeof value === 'object' &&\n      value.$slice &&\n      value.$each === undefined\n    ) value.$each = []\n\n    if (value !== null && typeof value === 'object' && value.$each) {\n      if (\n        Object.keys(value).length >= 3 ||\n        (Object.keys(value).length === 2 && value.$slice === undefined)\n      ) throw new Error('Can only use $slice in cunjunction with $each when $push to array')\n      if (!Array.isArray(value.$each)) throw new Error('$each requires an array value')\n\n      value.$each.forEach(v => {\n        obj[field].push(v)\n      })\n\n      if (value.$slice === undefined || typeof value.$slice !== 'number') return\n\n      if (value.$slice === 0) obj[field] = []\n      else {\n        let start\n        let end\n        const n = obj[field].length\n        if (value.$slice < 0) {\n          start = Math.max(0, n + value.$slice)\n          end = n\n        } else if (value.$slice > 0) {\n          start = 0\n          end = Math.min(n, value.$slice)\n        }\n        obj[field] = obj[field].slice(start, end)\n      }\n    } else {\n      obj[field].push(value)\n    }\n  })\n\n}\n\n/**\n * Modify a DB object according to an update query\n * @param {document} obj\n * @param {query} updateQuery\n * @return {document}\n * @alias module:model.modify\n */\nconst modify = (obj, updateQuery) => {\n  const keys = Object.keys(updateQuery)\n  const firstChars = keys.map(item => item[0])\n  const dollarFirstChars = firstChars.filter(c => c === '$')\n  let newDoc\n  let modifiers\n\n  if (keys.indexOf('_id') !== -1 && updateQuery._id !== obj._id) throw new Error('You cannot change a document\\'s _id')\n\n  if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) throw new Error('You cannot mix modifiers and normal fields')\n\n  if (dollarFirstChars.length === 0) {\n    // Simply replace the object with the update query contents\n    newDoc = deepCopy(updateQuery)\n    newDoc._id = obj._id\n  } else {\n    // Apply modifiers\n    modifiers = uniq(keys)\n    newDoc = deepCopy(obj)\n    modifiers.forEach(m => {\n      if (!modifierFunctions[m]) throw new Error(`Unknown modifier ${m}`)\n\n      // Can't rely on Object.keys throwing on non objects since ES6\n      // Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it\n      if (typeof updateQuery[m] !== 'object') throw new Error(`Modifier ${m}'s argument must be an object`)\n\n      const keys = Object.keys(updateQuery[m])\n      keys.forEach(k => {\n        modifierFunctions[m](newDoc, k, updateQuery[m][k])\n      })\n    })\n  }\n\n  // Check result is valid and return it\n  checkObject(newDoc)\n\n  if (obj._id !== newDoc._id) throw new Error('You can\\'t change a document\\'s _id')\n  return newDoc\n}\n\n// ==============================================================\n// Finding documents\n// ==============================================================\n\n/**\n * Get a value from object with dot notation\n * @param {object} obj\n * @param {string} field\n * @return {*}\n * @alias module:model.getDotValue\n */\nconst getDotValue = (obj, field) => {\n  const fieldParts = typeof field === 'string' ? field.split('.') : field\n\n  if (!obj) return undefined // field cannot be empty so that means we should return undefined so that nothing can match\n\n  if (fieldParts.length === 0) return obj\n\n  if (fieldParts.length === 1) return obj[fieldParts[0]]\n\n  if (Array.isArray(obj[fieldParts[0]])) {\n    // If the next field is an integer, return only this item of the array\n    const i = parseInt(fieldParts[1], 10)\n    if (typeof i === 'number' && !isNaN(i)) return getDotValue(obj[fieldParts[0]][i], fieldParts.slice(2))\n\n    // Return the array of values\n    return obj[fieldParts[0]].map(el => getDotValue(el, fieldParts.slice(1)))\n  } else return getDotValue(obj[fieldParts[0]], fieldParts.slice(1))\n}\n\n/**\n * Get dot values for either a bunch of fields or just one.\n */\nconst getDotValues = (obj, fields) => {\n  if (!Array.isArray(fields)) throw new Error('fields must be an Array')\n  if (fields.length > 1) {\n    const key = {}\n    for (const field of fields) {\n      key[field] = getDotValue(obj, field)\n    }\n    return key\n  } else return getDotValue(obj, fields[0])\n}\n\n/**\n * Check whether 'things' are equal\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * In the case of object, we check deep equality\n * Returns true if they are, false otherwise\n * @param {*} a\n * @param {*} a\n * @return {boolean}\n * @alias module:model.areThingsEqual\n */\nconst areThingsEqual = (a, b) => {\n  // Strings, booleans, numbers, null\n  if (\n    a === null ||\n    typeof a === 'string' ||\n    typeof a === 'boolean' ||\n    typeof a === 'number' ||\n    b === null ||\n    typeof b === 'string' ||\n    typeof b === 'boolean' ||\n    typeof b === 'number'\n  ) return a === b\n\n  // Dates\n  if (isDate(a) || isDate(b)) return isDate(a) && isDate(b) && a.getTime() === b.getTime()\n\n  // Arrays (no match since arrays are used as a $in)\n  // undefined (no match since they mean field doesn't exist and can't be serialized)\n  if (\n    (!(Array.isArray(a) && Array.isArray(b)) && (Array.isArray(a) || Array.isArray(b))) ||\n    a === undefined || b === undefined\n  ) return false\n\n  // General objects (check for deep equality)\n  // a and b should be objects at this point\n  let aKeys\n  let bKeys\n  try {\n    aKeys = Object.keys(a)\n    bKeys = Object.keys(b)\n  } catch (e) {\n    return false\n  }\n\n  if (aKeys.length !== bKeys.length) return false\n  for (const el of aKeys) {\n    if (bKeys.indexOf(el) === -1) return false\n    if (!areThingsEqual(a[el], b[el])) return false\n  }\n  return true\n}\n\n/**\n * Check that two values are comparable\n * @param {*} a\n * @param {*} a\n * @return {boolean}\n * @private\n */\nconst areComparable = (a, b) => {\n  if (\n    typeof a !== 'string' &&\n    typeof a !== 'number' &&\n    !isDate(a) &&\n    typeof b !== 'string' &&\n    typeof b !== 'number' &&\n    !isDate(b)\n  ) return false\n\n  if (typeof a !== typeof b) return false\n\n  return true\n}\n\n/**\n * @callback comparisonOperator\n * Arithmetic and comparison operators\n * @param {*} a Value in the object\n * @param {*} b Value in the query\n * @return {boolean}\n */\n\n/**\n * @enum {comparisonOperator}\n */\nconst comparisonFunctions = {\n  /** Lower than */\n  $lt: (a, b) => areComparable(a, b) && a < b,\n  /** Lower than or equals */\n  $lte: (a, b) => areComparable(a, b) && a <= b,\n  /** Greater than */\n  $gt: (a, b) => areComparable(a, b) && a > b,\n  /** Greater than or equals */\n  $gte: (a, b) => areComparable(a, b) && a >= b,\n  /** Does not equal */\n  $ne: (a, b) => a === undefined || !areThingsEqual(a, b),\n  /** Is in Array */\n  $in: (a, b) => {\n    if (!Array.isArray(b)) throw new Error('$in operator called with a non-array')\n\n    for (const el of b) {\n      if (areThingsEqual(a, el)) return true\n    }\n\n    return false\n  },\n  /** Is not in Array */\n  $nin: (a, b) => {\n    if (!Array.isArray(b)) throw new Error('$nin operator called with a non-array')\n\n    return !comparisonFunctions.$in(a, b)\n  },\n  /** Matches Regexp */\n  $regex: (a, b) => {\n    if (!isRegExp(b)) throw new Error('$regex operator called with non regular expression')\n\n    if (typeof a !== 'string') return false\n    else return b.test(a)\n  },\n  /** Returns true if field exists */\n  $exists: (a, b) => {\n    // This will be true for all values of stat except false, null, undefined and 0\n    // That's strange behaviour (we should only use true/false) but that's the way Mongo does it...\n    if (b || b === '') b = true\n    else b = false\n\n    if (a === undefined) return !b\n    else return b\n  },\n  /** Specific to Arrays, returns true if a length equals b */\n  $size: (a, b) => {\n    if (!Array.isArray(a)) return false\n    if (b % 1 !== 0) throw new Error('$size operator called without an integer')\n\n    return a.length === b\n  },\n  /** Specific to Arrays, returns true if some elements of a match the query b */\n  $elemMatch: (a, b) => {\n    if (!Array.isArray(a)) return false\n    return a.some(el => match(el, b))\n  }\n}\n\nconst arrayComparisonFunctions = { $size: true, $elemMatch: true }\n\n/**\n * @enum\n */\nconst logicalOperators = {\n  /**\n   * Match any of the subqueries\n   * @param {document} obj\n   * @param {query[]} query\n   * @return {boolean}\n   */\n  $or: (obj, query) => {\n    if (!Array.isArray(query)) throw new Error('$or operator used without an array')\n\n    for (let i = 0; i < query.length; i += 1) {\n      if (match(obj, query[i])) return true\n    }\n\n    return false\n  },\n  /**\n   * Match all of the subqueries\n   * @param {document} obj\n   * @param {query[]} query\n   * @return {boolean}\n   */\n  $and: (obj, query) => {\n    if (!Array.isArray(query)) throw new Error('$and operator used without an array')\n\n    for (let i = 0; i < query.length; i += 1) {\n      if (!match(obj, query[i])) return false\n    }\n\n    return true\n  },\n  /**\n   * Inverted match of the query\n   * @param {document} obj\n   * @param {query} query\n   * @return {boolean}\n   */\n  $not: (obj, query) => !match(obj, query),\n\n  /**\n   * @callback whereCallback\n   * @param {document} obj\n   * @return {boolean}\n   */\n\n  /**\n   * Use a function to match\n   * @param {document} obj\n   * @param {whereCallback} fn\n   * @return {boolean}\n   */\n  $where: (obj, fn) => {\n    if (typeof fn !== 'function') throw new Error('$where operator used without a function')\n\n    const result = fn.call(obj)\n    if (typeof result !== 'boolean') throw new Error('$where function must return boolean')\n\n    return result\n  }\n}\n\n/**\n * Tell if a given document matches a query\n * @param {document} obj Document to check\n * @param {query} query\n * @return {boolean}\n * @alias module:model.match\n */\nconst match = (obj, query) => {\n  // Primitive query against a primitive type\n  // This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later\n  // But I don't have time for a cleaner implementation now\n  if (isPrimitiveType(obj) || isPrimitiveType(query)) return matchQueryPart({ needAKey: obj }, 'needAKey', query)\n\n  // Normal query\n  for (const queryKey in query) {\n    if (Object.prototype.hasOwnProperty.call(query, queryKey)) {\n      const queryValue = query[queryKey]\n      if (queryKey[0] === '$') {\n        if (!logicalOperators[queryKey]) throw new Error(`Unknown logical operator ${queryKey}`)\n        if (!logicalOperators[queryKey](obj, queryValue)) return false\n      } else if (!matchQueryPart(obj, queryKey, queryValue)) return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Match an object against a specific { key: value } part of a query\n * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole\n * @param {object} obj\n * @param {string} queryKey\n * @param {*} queryValue\n * @param {boolean} [treatObjAsValue=false]\n * @return {boolean}\n * @private\n */\nfunction matchQueryPart (obj, queryKey, queryValue, treatObjAsValue) {\n  const objValue = getDotValue(obj, queryKey)\n\n  // Check if the value is an array if we don't force a treatment as value\n  if (Array.isArray(objValue) && !treatObjAsValue) {\n    // If the queryValue is an array, try to perform an exact match\n    if (Array.isArray(queryValue)) return matchQueryPart(obj, queryKey, queryValue, true)\n\n    // Check if we are using an array-specific comparison function\n    if (queryValue !== null && typeof queryValue === 'object' && !isRegExp(queryValue)) {\n      for (const key in queryValue) {\n        if (Object.prototype.hasOwnProperty.call(queryValue, key) && arrayComparisonFunctions[key]) { return matchQueryPart(obj, queryKey, queryValue, true) }\n      }\n    }\n\n    // If not, treat it as an array of { obj, query } where there needs to be at least one match\n    for (const el of objValue) {\n      if (matchQueryPart({ k: el }, 'k', queryValue)) return true // k here could be any string\n    }\n    return false\n  }\n\n  // queryValue is an actual object. Determine whether it contains comparison operators\n  // or only normal fields. Mixed objects are not allowed\n  if (queryValue !== null && typeof queryValue === 'object' && !isRegExp(queryValue) && !Array.isArray(queryValue)) {\n    const keys = Object.keys(queryValue)\n    const firstChars = keys.map(item => item[0])\n    const dollarFirstChars = firstChars.filter(c => c === '$')\n\n    if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) throw new Error('You cannot mix operators and normal fields')\n\n    // queryValue is an object of this form: { $comparisonOperator1: value1, ... }\n    if (dollarFirstChars.length > 0) {\n      for (const key of keys) {\n        if (!comparisonFunctions[key]) throw new Error(`Unknown comparison function ${key}`)\n\n        if (!comparisonFunctions[key](objValue, queryValue[key])) return false\n      }\n      return true\n    }\n  }\n\n  // Using regular expressions with basic querying\n  if (isRegExp(queryValue)) return comparisonFunctions.$regex(objValue, queryValue)\n\n  // queryValue is either a native value or a normal object\n  // Basic matching is possible\n  return areThingsEqual(objValue, queryValue)\n}\n\n// Interface\nmodule.exports.serialize = serialize\nmodule.exports.deserialize = deserialize\nmodule.exports.deepCopy = deepCopy\nmodule.exports.checkObject = checkObject\nmodule.exports.isPrimitiveType = isPrimitiveType\nmodule.exports.modify = modify\nmodule.exports.getDotValue = getDotValue\nmodule.exports.getDotValues = getDotValues\nmodule.exports.match = match\nmodule.exports.areThingsEqual = areThingsEqual\nmodule.exports.compareThings = compareThings\n", "const model = require('./model.js')\nconst { callbackify } = require('util')\n\n/**\n * Has a callback\n * @callback Cursor~mapFn\n * @param {document[]} res\n * @return {*|Promise<*>}\n */\n\n/**\n * Manage access to data, be it to find, update or remove it.\n *\n * It extends `Promise` so that its methods (which return `this`) are chainable & awaitable.\n * @extends Promise\n */\nclass Cursor {\n  /**\n   * Create a new cursor for this collection.\n   * @param {Datastore} db - The datastore this cursor is bound to\n   * @param {query} query - The query this cursor will operate on\n   * @param {Cursor~mapFn} [mapFn] - Handler to be executed after cursor has found the results and before the callback passed to find/findOne/update/remove\n   */\n  constructor (db, query, mapFn) {\n    /**\n     * @protected\n     * @type {Datastore}\n     */\n    this.db = db\n    /**\n     * @protected\n     * @type {query}\n     */\n    this.query = query || {}\n    /**\n     * The handler to be executed after cursor has found the results.\n     * @type {Cursor~mapFn}\n     * @protected\n     */\n    if (mapFn) this.mapFn = mapFn\n    /**\n     * @see Cursor#limit\n     * @type {undefined|number}\n     * @private\n     */\n    this._limit = undefined\n    /**\n     * @see Cursor#skip\n     * @type {undefined|number}\n     * @private\n     */\n    this._skip = undefined\n    /**\n     * @see Cursor#sort\n     * @type {undefined|Object.<string, number>}\n     * @private\n     */\n    this._sort = undefined\n    /**\n     * @see Cursor#projection\n     * @type {undefined|Object.<string, number>}\n     * @private\n     */\n    this._projection = undefined\n  }\n\n  /**\n   * Set a limit to the number of results for the given Cursor.\n   * @param {Number} limit\n   * @return {Cursor} the same instance of Cursor, (useful for chaining).\n   */\n  limit (limit) {\n    this._limit = limit\n    return this\n  }\n\n  /**\n   * Skip a number of results for the given Cursor.\n   * @param {Number} skip\n   * @return {Cursor} the same instance of Cursor, (useful for chaining).\n   */\n  skip (skip) {\n    this._skip = skip\n    return this\n  }\n\n  /**\n   * Sort results of the query for the given Cursor.\n   * @param {Object.<string, number>} sortQuery - sortQuery is { field: order }, field can use the dot-notation, order is 1 for ascending and -1 for descending\n   * @return {Cursor} the same instance of Cursor, (useful for chaining).\n   */\n  sort (sortQuery) {\n    this._sort = sortQuery\n    return this\n  }\n\n  /**\n   * Add the use of a projection to the given Cursor.\n   * @param {Object.<string, number>} projection - MongoDB-style projection. {} means take all fields. Then it's { key1: 1, key2: 1 } to take only key1 and key2\n   * { key1: 0, key2: 0 } to omit only key1 and key2. Except _id, you can't mix takes and omits.\n   * @return {Cursor} the same instance of Cursor, (useful for chaining).\n   */\n  projection (projection) {\n    this._projection = projection\n    return this\n  }\n\n  /**\n   * Apply the projection.\n   *\n   * This is an internal function. You should use {@link Cursor#execAsync} or {@link Cursor#exec}.\n   * @param {document[]} candidates\n   * @return {document[]}\n   * @private\n   */\n  _project (candidates) {\n    const res = []\n    let action\n\n    if (this._projection === undefined || Object.keys(this._projection).length === 0) {\n      return candidates\n    }\n\n    const keepId = this._projection._id !== 0\n    const { _id, ...rest } = this._projection\n    this._projection = rest\n\n    // Check for consistency\n    const keys = Object.keys(this._projection)\n    keys.forEach(k => {\n      if (action !== undefined && this._projection[k] !== action) throw new Error('Can\\'t both keep and omit fields except for _id')\n      action = this._projection[k]\n    })\n\n    // Do the actual projection\n    candidates.forEach(candidate => {\n      let toPush\n      if (action === 1) { // pick-type projection\n        toPush = { $set: {} }\n        keys.forEach(k => {\n          toPush.$set[k] = model.getDotValue(candidate, k)\n          if (toPush.$set[k] === undefined) delete toPush.$set[k]\n        })\n        toPush = model.modify({}, toPush)\n      } else { // omit-type projection\n        toPush = { $unset: {} }\n        keys.forEach(k => { toPush.$unset[k] = true })\n        toPush = model.modify(candidate, toPush)\n      }\n      if (keepId) toPush._id = candidate._id\n      else delete toPush._id\n      res.push(toPush)\n    })\n\n    return res\n  }\n\n  /**\n   * Get all matching elements\n   * Will return pointers to matched elements (shallow copies), returning full copies is the role of find or findOne\n   * This is an internal function, use execAsync which uses the executor\n   * @return {document[]|Promise<*>}\n   * @private\n   */\n  async _execAsync () {\n    let res = []\n    let added = 0\n    let skipped = 0\n\n    const candidates = await this.db._getCandidatesAsync(this.query)\n\n    for (const candidate of candidates) {\n      if (model.match(candidate, this.query)) {\n        // If a sort is defined, wait for the results to be sorted before applying limit and skip\n        if (!this._sort) {\n          if (this._skip && this._skip > skipped) skipped += 1\n          else {\n            res.push(candidate)\n            added += 1\n            if (this._limit && this._limit <= added) break\n          }\n        } else res.push(candidate)\n      }\n    }\n\n    // Apply all sorts\n    if (this._sort) {\n      // Sorting\n      const criteria = Object.entries(this._sort).map(([key, direction]) => ({ key, direction }))\n      res.sort((a, b) => {\n        for (const criterion of criteria) {\n          const compare = criterion.direction * model.compareThings(model.getDotValue(a, criterion.key), model.getDotValue(b, criterion.key), this.db.compareStrings)\n          if (compare !== 0) return compare\n        }\n        return 0\n      })\n\n      // Applying limit and skip\n      const limit = this._limit || res.length\n      const skip = this._skip || 0\n\n      res = res.slice(skip, skip + limit)\n    }\n\n    // Apply projection\n    res = this._project(res)\n    if (this.mapFn) return this.mapFn(res)\n    return res\n  }\n\n  /**\n   * @callback Cursor~execCallback\n   * @param {Error} err\n   * @param {document[]|*} res If a mapFn was given to the Cursor, then the type of this parameter is the one returned by the mapFn.\n   */\n\n  /**\n   * Callback version of {@link Cursor#exec}.\n   * @param {Cursor~execCallback} _callback\n   * @see Cursor#execAsync\n   */\n  exec (_callback) {\n    callbackify(() => this.execAsync())(_callback)\n  }\n\n  /**\n   * Get all matching elements.\n   * Will return pointers to matched elements (shallow copies), returning full copies is the role of {@link Datastore#findAsync} or {@link Datastore#findOneAsync}.\n   * @return {Promise<document[]|*>}\n   * @async\n   */\n  execAsync () {\n    return this.db.executor.pushAsync(() => this._execAsync())\n  }\n\n  then (onFulfilled, onRejected) {\n    return this.execAsync().then(onFulfilled, onRejected)\n  }\n\n  catch (onRejected) {\n    return this.execAsync().catch(onRejected)\n  }\n\n  finally (onFinally) {\n    return this.execAsync().finally(onFinally)\n  }\n}\n\n// Interface\nmodule.exports = Cursor\n", "/**\n * Utility functions that need to be reimplemented for each environment.\n * This is the version for the browser & React-Native\n * @module customUtilsBrowser\n * @private\n */\n\n/**\n * Taken from the crypto-browserify module\n * https://github.com/dominictarr/crypto-browserify\n * NOTE: Math.random() does not guarantee \"cryptographic quality\" but we actually don't need it\n * @param {number} size in bytes\n * @return {Array<number>}\n */\nconst randomBytes = size => {\n  const bytes = new Array(size)\n\n  for (let i = 0, r; i < size; i++) {\n    if ((i & 0x03) === 0) r = Math.random() * 0x100000000\n    bytes[i] = r >>> ((i & 0x03) << 3) & 0xff\n  }\n\n  return bytes\n}\n\n/**\n * Taken from the base64-js module\n * https://github.com/beatgammit/base64-js/\n * @param {Array} uint8\n * @return {string}\n */\nconst byteArrayToBase64 = uint8 => {\n  const lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  const extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes\n  let output = ''\n  let temp\n\n  const tripletToBase64 = num => lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (let i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output += tripletToBase64(temp)\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    temp = uint8[uint8.length - 1]\n    output += lookup[temp >> 2]\n    output += lookup[(temp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n    output += lookup[temp >> 10]\n    output += lookup[(temp >> 4) & 0x3F]\n    output += lookup[(temp << 2) & 0x3F]\n    output += '='\n  }\n\n  return output\n}\n\n/**\n * Return a random alphanumerical string of length len\n * There is a very small probability (less than 1/1,000,000) for the length to be less than len\n * (il the base64 conversion yields too many pluses and slashes) but\n * that's not an issue here\n * The probability of a collision is extremely small (need 3*10^12 documents to have one chance in a million of a collision)\n * See http://en.wikipedia.org/wiki/Birthday_problem\n * @param {number} len\n * @return {string}\n * @alias module:customUtilsNode.uid\n */\nconst uid = len => byteArrayToBase64(randomBytes(Math.ceil(Math.max(8, len * 2)))).replace(/[+/]/g, '').slice(0, len)\n\nmodule.exports.uid = uid\n", "/**\n * Responsible for sequentially executing actions on the database\n * @private\n */\nclass Waterfall {\n  /**\n   * Instantiate a new Waterfall.\n   */\n  constructor () {\n    /**\n     * This is the internal Promise object which resolves when all the tasks of the `Waterfall` are done.\n     *\n     * It will change any time `this.waterfall` is called.\n     *\n     * @type {Promise}\n     */\n    this.guardian = Promise.resolve()\n  }\n\n  /**\n   *\n   * @param {AsyncFunction} func\n   * @return {AsyncFunction}\n   */\n  waterfall (func) {\n    return (...args) => {\n      this.guardian = this.guardian.then(() => {\n        return func(...args)\n          .then(result => ({ error: false, result }), result => ({ error: true, result }))\n      })\n      return this.guardian.then(({ error, result }) => {\n        if (error) return Promise.reject(result)\n        else return Promise.resolve(result)\n      })\n    }\n  }\n\n  /**\n   * Shorthand for chaining a promise to the Waterfall\n   * @param {Promise} promise\n   * @return {Promise}\n   */\n  chain (promise) {\n    return this.waterfall(() => promise)()\n  }\n}\n\nmodule.exports = Waterfall\n", "const Waterfall = require('./waterfall')\n\n/**\n * Executes operations sequentially.\n * Has an option for a buffer that can be triggered afterwards.\n * @private\n */\nclass Executor {\n  /**\n   * Instantiates a new Executor.\n   */\n  constructor () {\n    /**\n     * If this.ready is `false`, then every task pushed will be buffered until this.processBuffer is called.\n     * @type {boolean}\n     * @private\n     */\n    this.ready = false\n    /**\n     * The main queue\n     * @type {Waterfall}\n     * @private\n     */\n    this.queue = new Waterfall()\n    /**\n     * The buffer queue\n     * @type {Waterfall}\n     * @private\n     */\n    this.buffer = null\n    /**\n     * Method to trigger the buffer processing.\n     *\n     * Do not be use directly, use `this.processBuffer` instead.\n     * @function\n     * @private\n     */\n    this._triggerBuffer = null\n    this.resetBuffer()\n  }\n\n  /**\n   * If executor is ready, queue task (and process it immediately if executor was idle)\n   * If not, buffer task for later processing\n   * @param {AsyncFunction} task Function to execute\n   * @param {boolean} [forceQueuing = false] Optional (defaults to false) force executor to queue task even if it is not ready\n   * @return {Promise<*>}\n   * @async\n   * @see Executor#push\n   */\n  pushAsync (task, forceQueuing = false) {\n    if (this.ready || forceQueuing) return this.queue.waterfall(task)()\n    else return this.buffer.waterfall(task)()\n  }\n\n  /**\n   * Queue all tasks in buffer (in the same order they came in)\n   * Automatically sets executor as ready\n   */\n  processBuffer () {\n    this.ready = true\n    this._triggerBuffer()\n    this.queue.waterfall(() => this.buffer.guardian)\n  }\n\n  /**\n   * Removes all tasks queued up in the buffer\n   */\n  resetBuffer () {\n    this.buffer = new Waterfall()\n    this.buffer.chain(new Promise(resolve => {\n      this._triggerBuffer = resolve\n    }))\n    if (this.ready) this._triggerBuffer()\n  }\n}\n\n// Interface\nmodule.exports = Executor\n", "/**\n * Return an array with the numbers from 0 to n-1, in a random order\n */\nconst getRandomArray = n => {\n  if (n === 0) return []\n  if (n === 1) return [0]\n\n  const res = getRandomArray(n - 1)\n  const next = Math.floor(Math.random() * n)\n  res.splice(next, 0, n - 1) // Add n-1 at a random position in the array\n\n  return res\n}\n\nmodule.exports.getRandomArray = getRandomArray\n\n/*\n * Default compareKeys function will work for numbers, strings and dates\n */\nconst defaultCompareKeysFunction = (a, b) => {\n  if (a < b) return -1\n  if (a > b) return 1\n  if (a === b) return 0\n\n  const err = new Error(\"Couldn't compare elements\")\n  err.a = a\n  err.b = b\n  throw err\n}\n\nmodule.exports.defaultCompareKeysFunction = defaultCompareKeysFunction\n\n/**\n * Check whether two values are equal (used in non-unique deletion)\n */\nconst defaultCheckValueEquality = (a, b) => a === b\n\nmodule.exports.defaultCheckValueEquality = defaultCheckValueEquality\n", "/**\n * Simple binary search tree\n */\nconst customUtils = require('./customUtils')\n\nclass BinarySearchTree {\n  /**\n   * Constructor\n   * @param {Object} options Optional\n   * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n   * @param {Key}      options.key Initialize this BST's key with key\n   * @param {Value}    options.value Initialize this BST's data with [value]\n   * @param {Function} options.compareKeys Initialize this BST's compareKeys\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.left = null\n    this.right = null\n    this.parent = options.parent !== undefined ? options.parent : null\n    if (Object.prototype.hasOwnProperty.call(options, 'key')) { this.key = options.key }\n    this.data = Object.prototype.hasOwnProperty.call(options, 'value') ? [options.value] : []\n    this.unique = options.unique || false\n\n    this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction\n    this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality\n  }\n\n  /**\n   * Get the descendant with max key\n   */\n  getMaxKeyDescendant () {\n    if (this.right) return this.right.getMaxKeyDescendant()\n    else return this\n  }\n\n  /**\n   * Get the maximum key\n   */\n  getMaxKey () {\n    return this.getMaxKeyDescendant().key\n  }\n\n  /**\n   * Get the descendant with min key\n   */\n  getMinKeyDescendant () {\n    if (this.left) return this.left.getMinKeyDescendant()\n    else return this\n  }\n\n  /**\n   * Get the minimum key\n   */\n  getMinKey () {\n    return this.getMinKeyDescendant().key\n  }\n\n  /**\n   * Check that all nodes (incl. leaves) fullfil condition given by fn\n   * test is a function passed every (key, data) and which throws if the condition is not met\n   */\n  checkAllNodesFullfillCondition (test) {\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return\n\n    test(this.key, this.data)\n    if (this.left) this.left.checkAllNodesFullfillCondition(test)\n    if (this.right) this.right.checkAllNodesFullfillCondition(test)\n  }\n\n  /**\n   * Check that the core BST properties on node ordering are verified\n   * Throw if they aren't\n   */\n  checkNodeOrdering () {\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return\n\n    if (this.left) {\n      this.left.checkAllNodesFullfillCondition(k => {\n        if (this.compareKeys(k, this.key) >= 0) throw new Error(`Tree with root ${this.key} is not a binary search tree`)\n      })\n      this.left.checkNodeOrdering()\n    }\n\n    if (this.right) {\n      this.right.checkAllNodesFullfillCondition(k => {\n        if (this.compareKeys(k, this.key) <= 0) throw new Error(`Tree with root ${this.key} is not a binary search tree`)\n      })\n      this.right.checkNodeOrdering()\n    }\n  }\n\n  /**\n   * Check that all pointers are coherent in this tree\n   */\n  checkInternalPointers () {\n    if (this.left) {\n      if (this.left.parent !== this) throw new Error(`Parent pointer broken for key ${this.key}`)\n      this.left.checkInternalPointers()\n    }\n\n    if (this.right) {\n      if (this.right.parent !== this) throw new Error(`Parent pointer broken for key ${this.key}`)\n      this.right.checkInternalPointers()\n    }\n  }\n\n  /**\n   * Check that a tree is a BST as defined here (node ordering and pointer references)\n   */\n  checkIsBST () {\n    this.checkNodeOrdering()\n    this.checkInternalPointers()\n    if (this.parent) throw new Error(\"The root shouldn't have a parent\")\n  }\n\n  /**\n   * Get number of keys inserted\n   */\n  getNumberOfKeys () {\n    let res\n\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return 0\n\n    res = 1\n    if (this.left) res += this.left.getNumberOfKeys()\n    if (this.right) res += this.right.getNumberOfKeys()\n\n    return res\n  }\n\n  /**\n   * Create a BST similar (i.e. same options except for key and value) to the current one\n   * Use the same constructor (i.e. BinarySearchTree, AVLTree etc)\n   * @param {Object} options see constructor\n   */\n  createSimilar (options) {\n    options = options || {}\n    options.unique = this.unique\n    options.compareKeys = this.compareKeys\n    options.checkValueEquality = this.checkValueEquality\n\n    return new this.constructor(options)\n  }\n\n  /**\n   * Create the left child of this BST and return it\n   */\n  createLeftChild (options) {\n    const leftChild = this.createSimilar(options)\n    leftChild.parent = this\n    this.left = leftChild\n\n    return leftChild\n  }\n\n  /**\n   * Create the right child of this BST and return it\n   */\n  createRightChild (options) {\n    const rightChild = this.createSimilar(options)\n    rightChild.parent = this\n    this.right = rightChild\n\n    return rightChild\n  }\n\n  /**\n   * Insert a new element\n   */\n  insert (key, value) {\n    // Empty tree, insert as root\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) {\n      this.key = key\n      this.data.push(value)\n      return\n    }\n\n    // Same key as root\n    if (this.compareKeys(this.key, key) === 0) {\n      if (this.unique) {\n        const err = new Error(`Can't insert key ${JSON.stringify(key)}, it violates the unique constraint`)\n        err.key = key\n        err.errorType = 'uniqueViolated'\n        throw err\n      } else this.data.push(value)\n      return\n    }\n\n    if (this.compareKeys(key, this.key) < 0) {\n      // Insert in left subtree\n      if (this.left) this.left.insert(key, value)\n      else this.createLeftChild({ key: key, value: value })\n    } else {\n      // Insert in right subtree\n      if (this.right) this.right.insert(key, value)\n      else this.createRightChild({ key: key, value: value })\n    }\n  }\n\n  /**\n   * Search for all data corresponding to a key\n   */\n  search (key) {\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return []\n\n    if (this.compareKeys(this.key, key) === 0) return this.data\n\n    if (this.compareKeys(key, this.key) < 0) {\n      if (this.left) return this.left.search(key)\n      else return []\n    } else {\n      if (this.right) return this.right.search(key)\n      else return []\n    }\n  }\n\n  /**\n   * Return a function that tells whether a given key matches a lower bound\n   */\n  getLowerBoundMatcher (query) {\n    // No lower bound\n    if (!Object.prototype.hasOwnProperty.call(query, '$gt') && !Object.prototype.hasOwnProperty.call(query, '$gte')) return () => true\n\n    if (Object.prototype.hasOwnProperty.call(query, '$gt') && Object.prototype.hasOwnProperty.call(query, '$gte')) {\n      if (this.compareKeys(query.$gte, query.$gt) === 0) return key => this.compareKeys(key, query.$gt) > 0\n\n      if (this.compareKeys(query.$gte, query.$gt) > 0) return key => this.compareKeys(key, query.$gte) >= 0\n      else return key => this.compareKeys(key, query.$gt) > 0\n    }\n\n    if (Object.prototype.hasOwnProperty.call(query, '$gt')) return key => this.compareKeys(key, query.$gt) > 0\n    else return key => this.compareKeys(key, query.$gte) >= 0\n  }\n\n  /**\n   * Return a function that tells whether a given key matches an upper bound\n   */\n  getUpperBoundMatcher (query) {\n    // No lower bound\n    if (!Object.prototype.hasOwnProperty.call(query, '$lt') && !Object.prototype.hasOwnProperty.call(query, '$lte')) return () => true\n\n    if (Object.prototype.hasOwnProperty.call(query, '$lt') && Object.prototype.hasOwnProperty.call(query, '$lte')) {\n      if (this.compareKeys(query.$lte, query.$lt) === 0) return key => this.compareKeys(key, query.$lt) < 0\n\n      if (this.compareKeys(query.$lte, query.$lt) < 0) return key => this.compareKeys(key, query.$lte) <= 0\n      else return key => this.compareKeys(key, query.$lt) < 0\n    }\n\n    if (Object.prototype.hasOwnProperty.call(query, '$lt')) return key => this.compareKeys(key, query.$lt) < 0\n    else return key => this.compareKeys(key, query.$lte) <= 0\n  }\n\n  /**\n   * Get all data for a key between bounds\n   * Return it in key order\n   * @param {Object} query Mongo-style query where keys are $lt, $lte, $gt or $gte (other keys are not considered)\n   * @param {Functions} lbm/ubm matching functions calculated at the first recursive step\n   */\n  betweenBounds (query, lbm, ubm) {\n    const res = []\n\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return [] // Empty tree\n\n    lbm = lbm || this.getLowerBoundMatcher(query)\n    ubm = ubm || this.getUpperBoundMatcher(query)\n\n    if (lbm(this.key) && this.left) append(res, this.left.betweenBounds(query, lbm, ubm))\n    if (lbm(this.key) && ubm(this.key)) append(res, this.data)\n    if (ubm(this.key) && this.right) append(res, this.right.betweenBounds(query, lbm, ubm))\n\n    return res\n  }\n\n  /**\n   * Delete the current node if it is a leaf\n   * Return true if it was deleted\n   */\n  deleteIfLeaf () {\n    if (this.left || this.right) return false\n\n    // The leaf is itself a root\n    if (!this.parent) {\n      delete this.key\n      this.data = []\n      return true\n    }\n\n    if (this.parent.left === this) this.parent.left = null\n    else this.parent.right = null\n\n    return true\n  }\n\n  /**\n   * Delete the current node if it has only one child\n   * Return true if it was deleted\n   */\n  deleteIfOnlyOneChild () {\n    let child\n\n    if (this.left && !this.right) child = this.left\n    if (!this.left && this.right) child = this.right\n    if (!child) return false\n\n    // Root\n    if (!this.parent) {\n      this.key = child.key\n      this.data = child.data\n\n      this.left = null\n      if (child.left) {\n        this.left = child.left\n        child.left.parent = this\n      }\n\n      this.right = null\n      if (child.right) {\n        this.right = child.right\n        child.right.parent = this\n      }\n\n      return true\n    }\n\n    if (this.parent.left === this) {\n      this.parent.left = child\n      child.parent = this.parent\n    } else {\n      this.parent.right = child\n      child.parent = this.parent\n    }\n\n    return true\n  }\n\n  /**\n   * Delete a key or just a value\n   * @param {Key} key\n   * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n   */\n  delete (key, value) {\n    const newData = []\n    let replaceWith\n\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return\n\n    if (this.compareKeys(key, this.key) < 0) {\n      if (this.left) this.left.delete(key, value)\n      return\n    }\n\n    if (this.compareKeys(key, this.key) > 0) {\n      if (this.right) this.right.delete(key, value)\n      return\n    }\n\n    if (!this.compareKeys(key, this.key) === 0) return\n\n    // Delete only a value\n    if (this.data.length > 1 && value !== undefined) {\n      this.data.forEach(d => {\n        if (!this.checkValueEquality(d, value)) newData.push(d)\n      })\n      this.data = newData\n      return\n    }\n\n    // Delete the whole node\n    if (this.deleteIfLeaf()) return\n\n    if (this.deleteIfOnlyOneChild()) return\n\n    // We are in the case where the node to delete has two children\n    if (Math.random() >= 0.5) { // Randomize replacement to avoid unbalancing the tree too much\n      // Use the in-order predecessor\n      replaceWith = this.left.getMaxKeyDescendant()\n\n      this.key = replaceWith.key\n      this.data = replaceWith.data\n\n      if (this === replaceWith.parent) { // Special case\n        this.left = replaceWith.left\n        if (replaceWith.left) replaceWith.left.parent = replaceWith.parent\n      } else {\n        replaceWith.parent.right = replaceWith.left\n        if (replaceWith.left) replaceWith.left.parent = replaceWith.parent\n      }\n    } else {\n      // Use the in-order successor\n      replaceWith = this.right.getMinKeyDescendant()\n\n      this.key = replaceWith.key\n      this.data = replaceWith.data\n\n      if (this === replaceWith.parent) { // Special case\n        this.right = replaceWith.right\n        if (replaceWith.right) replaceWith.right.parent = replaceWith.parent\n      } else {\n        replaceWith.parent.left = replaceWith.right\n        if (replaceWith.right) replaceWith.right.parent = replaceWith.parent\n      }\n    }\n  }\n\n  /**\n   * Execute a function on every node of the tree, in key order\n   * @param {Function} fn Signature: node. Most useful will probably be node.key and node.data\n   */\n  executeOnEveryNode (fn) {\n    if (this.left) this.left.executeOnEveryNode(fn)\n    fn(this)\n    if (this.right) this.right.executeOnEveryNode(fn)\n  }\n\n  /**\n   * Pretty print a tree\n   * @param {Boolean} printData To print the nodes' data along with the key\n   */\n  prettyPrint (printData, spacing) {\n    spacing = spacing || ''\n\n    console.log(`${spacing}* ${this.key}`)\n    if (printData) console.log(`${spacing}* ${this.data}`)\n\n    if (!this.left && !this.right) return\n\n    if (this.left) this.left.prettyPrint(printData, `${spacing}  `)\n    else console.log(`${spacing}  *`)\n\n    if (this.right) this.right.prettyPrint(printData, `${spacing}  `)\n    else console.log(`${spacing}  *`)\n  }\n}\n\n// ================================\n// Methods used to test the tree\n// ================================\n\n// ============================================\n// Methods used to actually work on the tree\n// ============================================\n\n// Append all elements in toAppend to array\nfunction append (array, toAppend) {\n  for (let i = 0; i < toAppend.length; i += 1) {\n    array.push(toAppend[i])\n  }\n}\n\n// Interface\nmodule.exports = BinarySearchTree\n", "/**\n * Self-balancing binary search tree using the AVL implementation\n */\nconst BinarySearchTree = require('./bst')\nconst customUtils = require('./customUtils')\n\nclass AVLTree {\n  /**\n   * Constructor\n   * We can't use a direct pointer to the root node (as in the simple binary search tree)\n   * as the root will change during tree rotations\n   * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n   * @param {Function} options.compareKeys Initialize this BST's compareKeys\n   */\n  constructor (options) {\n    this.tree = new _AVLTree(options)\n  }\n\n  checkIsAVLT () { this.tree.checkIsAVLT() }\n\n  // Insert in the internal tree, update the pointer to the root if needed\n  insert (key, value) {\n    const newTree = this.tree.insert(key, value)\n\n    // If newTree is undefined, that means its structure was not modified\n    if (newTree) { this.tree = newTree }\n  }\n\n  // Delete a value\n  delete (key, value) {\n    const newTree = this.tree.delete(key, value)\n\n    // If newTree is undefined, that means its structure was not modified\n    if (newTree) { this.tree = newTree }\n  }\n}\n\nclass _AVLTree extends BinarySearchTree {\n  /**\n   * Constructor of the internal AVLTree\n   * @param {Object} options Optional\n   * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n   * @param {Key}      options.key Initialize this BST's key with key\n   * @param {Value}    options.value Initialize this BST's data with [value]\n   * @param {Function} options.compareKeys Initialize this BST's compareKeys\n   */\n  constructor (options) {\n    super()\n    options = options || {}\n\n    this.left = null\n    this.right = null\n    this.parent = options.parent !== undefined ? options.parent : null\n    if (Object.prototype.hasOwnProperty.call(options, 'key')) this.key = options.key\n    this.data = Object.prototype.hasOwnProperty.call(options, 'value') ? [options.value] : []\n    this.unique = options.unique || false\n\n    this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction\n    this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality\n  }\n\n  /**\n   * Check the recorded height is correct for every node\n   * Throws if one height doesn't match\n   */\n  checkHeightCorrect () {\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) { return } // Empty tree\n\n    if (this.left && this.left.height === undefined) { throw new Error('Undefined height for node ' + this.left.key) }\n    if (this.right && this.right.height === undefined) { throw new Error('Undefined height for node ' + this.right.key) }\n    if (this.height === undefined) { throw new Error('Undefined height for node ' + this.key) }\n\n    const leftH = this.left ? this.left.height : 0\n    const rightH = this.right ? this.right.height : 0\n\n    if (this.height !== 1 + Math.max(leftH, rightH)) { throw new Error('Height constraint failed for node ' + this.key) }\n    if (this.left) { this.left.checkHeightCorrect() }\n    if (this.right) { this.right.checkHeightCorrect() }\n  }\n\n  /**\n   * Return the balance factor\n   */\n  balanceFactor () {\n    const leftH = this.left ? this.left.height : 0\n    const rightH = this.right ? this.right.height : 0\n    return leftH - rightH\n  }\n\n  /**\n   * Check that the balance factors are all between -1 and 1\n   */\n  checkBalanceFactors () {\n    if (Math.abs(this.balanceFactor()) > 1) { throw new Error('Tree is unbalanced at node ' + this.key) }\n\n    if (this.left) { this.left.checkBalanceFactors() }\n    if (this.right) { this.right.checkBalanceFactors() }\n  }\n\n  /**\n   * When checking if the BST conditions are met, also check that the heights are correct\n   * and the tree is balanced\n   */\n  checkIsAVLT () {\n    super.checkIsBST()\n    this.checkHeightCorrect()\n    this.checkBalanceFactors()\n  }\n\n  /**\n   * Perform a right rotation of the tree if possible\n   * and return the root of the resulting tree\n   * The resulting tree's nodes' heights are also updated\n   */\n  rightRotation () {\n    const q = this\n    const p = this.left\n\n    if (!p) return q // No change\n\n    const b = p.right\n\n    // Alter tree structure\n    if (q.parent) {\n      p.parent = q.parent\n      if (q.parent.left === q) q.parent.left = p\n      else q.parent.right = p\n    } else {\n      p.parent = null\n    }\n    p.right = q\n    q.parent = p\n    q.left = b\n    if (b) { b.parent = q }\n\n    // Update heights\n    const ah = p.left ? p.left.height : 0\n    const bh = b ? b.height : 0\n    const ch = q.right ? q.right.height : 0\n    q.height = Math.max(bh, ch) + 1\n    p.height = Math.max(ah, q.height) + 1\n\n    return p\n  }\n\n  /**\n   * Perform a left rotation of the tree if possible\n   * and return the root of the resulting tree\n   * The resulting tree's nodes' heights are also updated\n   */\n  leftRotation () {\n    const p = this\n    const q = this.right\n\n    if (!q) { return this } // No change\n\n    const b = q.left\n\n    // Alter tree structure\n    if (p.parent) {\n      q.parent = p.parent\n      if (p.parent.left === p) p.parent.left = q\n      else p.parent.right = q\n    } else {\n      q.parent = null\n    }\n    q.left = p\n    p.parent = q\n    p.right = b\n    if (b) { b.parent = p }\n\n    // Update heights\n    const ah = p.left ? p.left.height : 0\n    const bh = b ? b.height : 0\n    const ch = q.right ? q.right.height : 0\n    p.height = Math.max(ah, bh) + 1\n    q.height = Math.max(ch, p.height) + 1\n\n    return q\n  }\n\n  /**\n   * Modify the tree if its right subtree is too small compared to the left\n   * Return the new root if any\n   */\n  rightTooSmall () {\n    if (this.balanceFactor() <= 1) return this // Right is not too small, don't change\n\n    if (this.left.balanceFactor() < 0) this.left.leftRotation()\n\n    return this.rightRotation()\n  }\n\n  /**\n   * Modify the tree if its left subtree is too small compared to the right\n   * Return the new root if any\n   */\n  leftTooSmall () {\n    if (this.balanceFactor() >= -1) { return this } // Left is not too small, don't change\n\n    if (this.right.balanceFactor() > 0) this.right.rightRotation()\n\n    return this.leftRotation()\n  }\n\n  /**\n   * Rebalance the tree along the given path. The path is given reversed (as he was calculated\n   * in the insert and delete functions).\n   * Returns the new root of the tree\n   * Of course, the first element of the path must be the root of the tree\n   */\n  rebalanceAlongPath (path) {\n    let newRoot = this\n    let rotated\n    let i\n\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) {\n      delete this.height\n      return this\n    } // Empty tree\n\n    // Rebalance the tree and update all heights\n    for (i = path.length - 1; i >= 0; i -= 1) {\n      path[i].height = 1 + Math.max(path[i].left ? path[i].left.height : 0, path[i].right ? path[i].right.height : 0)\n\n      if (path[i].balanceFactor() > 1) {\n        rotated = path[i].rightTooSmall()\n        if (i === 0) newRoot = rotated\n      }\n\n      if (path[i].balanceFactor() < -1) {\n        rotated = path[i].leftTooSmall()\n        if (i === 0) newRoot = rotated\n      }\n    }\n\n    return newRoot\n  }\n\n  /**\n   * Insert a key, value pair in the tree while maintaining the AVL tree height constraint\n   * Return a pointer to the root node, which may have changed\n   */\n  insert (key, value) {\n    const insertPath = []\n    let currentNode = this\n\n    // Empty tree, insert as root\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) {\n      this.key = key\n      this.data.push(value)\n      this.height = 1\n      return this\n    }\n\n    // Insert new leaf at the right place\n    while (true) {\n      // Same key: no change in the tree structure\n      if (currentNode.compareKeys(currentNode.key, key) === 0) {\n        if (currentNode.unique) {\n          const err = new Error(`Can't insert key ${JSON.stringify(key)}, it violates the unique constraint`)\n          err.key = key\n          err.errorType = 'uniqueViolated'\n          throw err\n        } else currentNode.data.push(value)\n        return this\n      }\n\n      insertPath.push(currentNode)\n\n      if (currentNode.compareKeys(key, currentNode.key) < 0) {\n        if (!currentNode.left) {\n          insertPath.push(currentNode.createLeftChild({ key: key, value: value }))\n          break\n        } else currentNode = currentNode.left\n      } else {\n        if (!currentNode.right) {\n          insertPath.push(currentNode.createRightChild({ key: key, value: value }))\n          break\n        } else currentNode = currentNode.right\n      }\n    }\n\n    return this.rebalanceAlongPath(insertPath)\n  }\n\n  /**\n   * Delete a key or just a value and return the new root of the tree\n   * @param {Key} key\n   * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n   */\n  delete (key, value) {\n    const newData = []\n    let replaceWith\n    let currentNode = this\n    const deletePath = []\n\n    if (!Object.prototype.hasOwnProperty.call(this, 'key')) return this // Empty tree\n\n    // Either no match is found and the function will return from within the loop\n    // Or a match is found and deletePath will contain the path from the root to the node to delete after the loop\n    while (true) {\n      if (currentNode.compareKeys(key, currentNode.key) === 0) { break }\n\n      deletePath.push(currentNode)\n\n      if (currentNode.compareKeys(key, currentNode.key) < 0) {\n        if (currentNode.left) {\n          currentNode = currentNode.left\n        } else return this // Key not found, no modification\n      } else {\n        // currentNode.compareKeys(key, currentNode.key) is > 0\n        if (currentNode.right) {\n          currentNode = currentNode.right\n        } else return this // Key not found, no modification\n      }\n    }\n\n    // Delete only a value (no tree modification)\n    if (currentNode.data.length > 1 && value !== undefined) {\n      currentNode.data.forEach(function (d) {\n        if (!currentNode.checkValueEquality(d, value)) newData.push(d)\n      })\n      currentNode.data = newData\n      return this\n    }\n\n    // Delete a whole node\n\n    // Leaf\n    if (!currentNode.left && !currentNode.right) {\n      if (currentNode === this) { // This leaf is also the root\n        delete currentNode.key\n        currentNode.data = []\n        delete currentNode.height\n        return this\n      } else {\n        if (currentNode.parent.left === currentNode) currentNode.parent.left = null\n        else currentNode.parent.right = null\n        return this.rebalanceAlongPath(deletePath)\n      }\n    }\n\n    // Node with only one child\n    if (!currentNode.left || !currentNode.right) {\n      replaceWith = currentNode.left ? currentNode.left : currentNode.right\n\n      if (currentNode === this) { // This node is also the root\n        replaceWith.parent = null\n        return replaceWith // height of replaceWith is necessarily 1 because the tree was balanced before deletion\n      } else {\n        if (currentNode.parent.left === currentNode) {\n          currentNode.parent.left = replaceWith\n          replaceWith.parent = currentNode.parent\n        } else {\n          currentNode.parent.right = replaceWith\n          replaceWith.parent = currentNode.parent\n        }\n\n        return this.rebalanceAlongPath(deletePath)\n      }\n    }\n\n    // Node with two children\n    // Use the in-order predecessor (no need to randomize since we actively rebalance)\n    deletePath.push(currentNode)\n    replaceWith = currentNode.left\n\n    // Special case: the in-order predecessor is right below the node to delete\n    if (!replaceWith.right) {\n      currentNode.key = replaceWith.key\n      currentNode.data = replaceWith.data\n      currentNode.left = replaceWith.left\n      if (replaceWith.left) { replaceWith.left.parent = currentNode }\n      return this.rebalanceAlongPath(deletePath)\n    }\n\n    // After this loop, replaceWith is the right-most leaf in the left subtree\n    // and deletePath the path from the root (inclusive) to replaceWith (exclusive)\n    while (true) {\n      if (replaceWith.right) {\n        deletePath.push(replaceWith)\n        replaceWith = replaceWith.right\n      } else break\n    }\n\n    currentNode.key = replaceWith.key\n    currentNode.data = replaceWith.data\n\n    replaceWith.parent.right = replaceWith.left\n    if (replaceWith.left) replaceWith.left.parent = replaceWith.parent\n\n    return this.rebalanceAlongPath(deletePath)\n  }\n}\n\n/**\n * Keep a pointer to the internal tree constructor for testing purposes\n */\nAVLTree._AVLTree = _AVLTree;\n\n/**\n * Other functions we want to use on an AVLTree as if it were the internal _AVLTree\n */\n['getNumberOfKeys', 'search', 'betweenBounds', 'prettyPrint', 'executeOnEveryNode'].forEach(function (fn) {\n  AVLTree.prototype[fn] = function () {\n    return this.tree[fn].apply(this.tree, arguments)\n  }\n})\n\n// Interface\nmodule.exports = AVLTree\n", "module.exports.BinarySearchTree = require('./lib/bst')\nmodule.exports.AVLTree = require('./lib/avltree')\n", "const BinarySearchTree = require('@seald-io/binary-search-tree').AVLTree\nconst model = require('./model.js')\nconst { uniq, isDate } = require('./utils.js')\n\n/**\n * Two indexed pointers are equal if they point to the same place\n * @param {*} a\n * @param {*} b\n * @return {boolean}\n * @private\n */\nconst checkValueEquality = (a, b) => a === b\n\n/**\n * Type-aware projection\n * @param {*} elt\n * @return {string|*}\n * @private\n */\nconst projectForUnique = elt => {\n  if (elt === null) return '$null'\n  if (typeof elt === 'string') return '$string' + elt\n  if (typeof elt === 'boolean') return '$boolean' + elt\n  if (typeof elt === 'number') return '$number' + elt\n  if (isDate(elt)) return '$date' + elt.getTime()\n\n  return elt // Arrays and objects, will check for pointer equality\n}\n\n/**\n * Indexes on field names, with atomic operations and which can optionally enforce a unique constraint or allow indexed\n * fields to be undefined\n * @private\n */\nclass Index {\n  /**\n   * Create a new index\n   * All methods on an index guarantee that either the whole operation was successful and the index changed\n   * or the operation was unsuccessful and an error is thrown while the index is unchanged\n   * @param {object} options\n   * @param {string} options.fieldName On which field should the index apply, can use dot notation to index on sub fields, can use comma-separated notation to use compound indexes\n   * @param {boolean} [options.unique = false] Enforces a unique constraint\n   * @param {boolean} [options.sparse = false] Allows a sparse index (we can have documents for which fieldName is `undefined`)\n   */\n  constructor (options) {\n    /**\n     * On which field the index applies to, can use dot notation to index on sub fields, can use comma-separated notation to use compound indexes.\n     * @type {string}\n     */\n    this.fieldName = options.fieldName\n\n    if (typeof this.fieldName !== 'string') throw new Error('fieldName must be a string')\n\n    /**\n     * Internal property which is an Array representing the fieldName split with `,`, useful only for compound indexes.\n     * @type {string[]}\n     * @private\n     */\n    this._fields = this.fieldName.split(',')\n\n    /**\n     * Defines if the index enforces a unique constraint for this index.\n     * @type {boolean}\n     */\n    this.unique = options.unique || false\n    /**\n     * Defines if we can have documents for which fieldName is `undefined`\n     * @type {boolean}\n     */\n    this.sparse = options.sparse || false\n\n    /**\n     * Options object given to the underlying BinarySearchTree.\n     * @type {{unique: boolean, checkValueEquality: (function(*, *): boolean), compareKeys: ((function(*, *, compareStrings): (number|number))|*)}}\n     */\n    this.treeOptions = { unique: this.unique, compareKeys: model.compareThings, checkValueEquality }\n\n    /**\n     * Underlying BinarySearchTree for this index. Uses an AVLTree for optimization.\n     * @type {AVLTree}\n     */\n    this.tree = new BinarySearchTree(this.treeOptions)\n  }\n\n  /**\n   * Reset an index\n   * @param {?document|?document[]} [newData] Data to initialize the index with. If an error is thrown during\n   * insertion, the index is not modified.\n   */\n  reset (newData) {\n    this.tree = new BinarySearchTree(this.treeOptions)\n\n    if (newData) this.insert(newData)\n  }\n\n  /**\n   * Insert a new document in the index\n   * If an array is passed, we insert all its elements (if one insertion fails the index is not modified)\n   * O(log(n))\n   * @param {document|document[]} doc The document, or array of documents, to insert.\n   */\n  insert (doc) {\n    let keys\n    let failingIndex\n    let error\n\n    if (Array.isArray(doc)) {\n      this.insertMultipleDocs(doc)\n      return\n    }\n\n    const key = model.getDotValues(doc, this._fields)\n\n    // We don't index documents that don't contain the field if the index is sparse\n    if ((key === undefined || (typeof key === 'object' && key !== null && Object.values(key).every(el => el === undefined))) && this.sparse) return\n\n    if (!Array.isArray(key)) this.tree.insert(key, doc)\n    else {\n      // If an insert fails due to a unique constraint, roll back all inserts before it\n      keys = uniq(key, projectForUnique)\n\n      for (let i = 0; i < keys.length; i += 1) {\n        try {\n          this.tree.insert(keys[i], doc)\n        } catch (e) {\n          error = e\n          failingIndex = i\n          break\n        }\n      }\n\n      if (error) {\n        for (let i = 0; i < failingIndex; i += 1) {\n          this.tree.delete(keys[i], doc)\n        }\n\n        throw error\n      }\n    }\n  }\n\n  /**\n   * Insert an array of documents in the index\n   * If a constraint is violated, the changes should be rolled back and an error thrown\n   * @param {document[]} docs Array of documents to insert.\n   * @private\n   */\n  insertMultipleDocs (docs) {\n    let error\n    let failingIndex\n\n    for (let i = 0; i < docs.length; i += 1) {\n      try {\n        this.insert(docs[i])\n      } catch (e) {\n        error = e\n        failingIndex = i\n        break\n      }\n    }\n\n    if (error) {\n      for (let i = 0; i < failingIndex; i += 1) {\n        this.remove(docs[i])\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes a document from the index.\n   * If an array is passed, we remove all its elements\n   * The remove operation is safe with regards to the 'unique' constraint\n   * O(log(n))\n   * @param {document[]|document} doc The document, or Array of documents, to remove.\n   */\n  remove (doc) {\n    if (Array.isArray(doc)) {\n      doc.forEach(d => { this.remove(d) })\n      return\n    }\n\n    const key = model.getDotValues(doc, this._fields)\n    if (key === undefined && this.sparse) return\n\n    if (!Array.isArray(key)) {\n      this.tree.delete(key, doc)\n    } else {\n      uniq(key, projectForUnique).forEach(_key => {\n        this.tree.delete(_key, doc)\n      })\n    }\n  }\n\n  /**\n   * Update a document in the index\n   * If a constraint is violated, changes are rolled back and an error thrown\n   * Naive implementation, still in O(log(n))\n   * @param {document|Array.<{oldDoc: document, newDoc: document}>} oldDoc Document to update, or an `Array` of\n   * `{oldDoc, newDoc}` pairs.\n   * @param {document} [newDoc] Document to replace the oldDoc with. If the first argument is an `Array` of\n   * `{oldDoc, newDoc}` pairs, this second argument is ignored.\n   */\n  update (oldDoc, newDoc) {\n    if (Array.isArray(oldDoc)) {\n      this.updateMultipleDocs(oldDoc)\n      return\n    }\n\n    this.remove(oldDoc)\n\n    try {\n      this.insert(newDoc)\n    } catch (e) {\n      this.insert(oldDoc)\n      throw e\n    }\n  }\n\n  /**\n   * Update multiple documents in the index\n   * If a constraint is violated, the changes need to be rolled back\n   * and an error thrown\n   * @param {Array.<{oldDoc: document, newDoc: document}>} pairs\n   *\n   * @private\n   */\n  updateMultipleDocs (pairs) {\n    let failingIndex\n    let error\n\n    for (let i = 0; i < pairs.length; i += 1) {\n      this.remove(pairs[i].oldDoc)\n    }\n\n    for (let i = 0; i < pairs.length; i += 1) {\n      try {\n        this.insert(pairs[i].newDoc)\n      } catch (e) {\n        error = e\n        failingIndex = i\n        break\n      }\n    }\n\n    // If an error was raised, roll back changes in the inverse order\n    if (error) {\n      for (let i = 0; i < failingIndex; i += 1) {\n        this.remove(pairs[i].newDoc)\n      }\n\n      for (let i = 0; i < pairs.length; i += 1) {\n        this.insert(pairs[i].oldDoc)\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Revert an update\n   * @param {document|Array.<{oldDoc: document, newDoc: document}>} oldDoc Document to revert to, or an `Array` of `{oldDoc, newDoc}` pairs.\n   * @param {document} [newDoc] Document to revert from. If the first argument is an Array of {oldDoc, newDoc}, this second argument is ignored.\n   */\n  revertUpdate (oldDoc, newDoc) {\n    const revert = []\n\n    if (!Array.isArray(oldDoc)) this.update(newDoc, oldDoc)\n    else {\n      oldDoc.forEach(pair => {\n        revert.push({ oldDoc: pair.newDoc, newDoc: pair.oldDoc })\n      })\n      this.update(revert)\n    }\n  }\n\n  /**\n   * Get all documents in index whose key match value (if it is a Thing) or one of the elements of value (if it is an array of Things)\n   * @param {Array.<*>|*} value Value to match the key against\n   * @return {document[]}\n   */\n  getMatching (value) {\n    if (!Array.isArray(value)) return this.tree.search(value)\n    else {\n      const _res = {}\n      const res = []\n\n      value.forEach(v => {\n        this.getMatching(v).forEach(doc => {\n          _res[doc._id] = doc\n        })\n      })\n\n      Object.keys(_res).forEach(_id => {\n        res.push(_res[_id])\n      })\n\n      return res\n    }\n  }\n\n  /**\n   * Get all documents in index whose key is between bounds are they are defined by query\n   * Documents are sorted by key\n   * @param {object} query An object with at least one matcher among $gt, $gte, $lt, $lte.\n   * @param {*} [query.$gt] Greater than matcher.\n   * @param {*} [query.$gte] Greater than or equal matcher.\n   * @param {*} [query.$lt] Lower than matcher.\n   * @param {*} [query.$lte] Lower than or equal matcher.\n   * @return {document[]}\n   */\n  getBetweenBounds (query) {\n    return this.tree.betweenBounds(query)\n  }\n\n  /**\n   * Get all elements in the index\n   * @return {document[]}\n   */\n  getAll () {\n    const res = []\n\n    this.tree.executeOnEveryNode(node => {\n      res.push(...node.data)\n    })\n\n    return res\n  }\n}\n\n// Interface\nmodule.exports = Index\n", "module.exports = {}\n", "/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n", "/**\n * Way data is stored for this database\n *\n * This version is the browser version and uses [localforage]{@link https://github.com/localForage/localForage} which chooses the best option depending on user browser (IndexedDB then WebSQL then localStorage).\n * @module storageBrowser\n * @see module:storage\n * @see module:storageReactNative\n * @private\n */\n\nconst localforage = require('localforage')\n\n// Configure localforage to display NeDB name for now. Would be a good idea to let user use his own app name\nconst store = localforage.createInstance({\n  name: 'NeDB',\n  storeName: 'nedbdata'\n})\n\n/**\n * Returns Promise<true> if file exists.\n *\n * @param {string} file\n * @return {Promise<boolean>}\n * @async\n * @alias module:storageBrowser.existsAsync\n */\nconst existsAsync = async file => {\n  try {\n    const value = await store.getItem(file)\n    if (value !== null) return true // Even if value is undefined, localforage returns null\n    return false\n  } catch (error) {\n    return false\n  }\n}\n\n/**\n * Moves the item from one path to another.\n * @param {string} oldPath\n * @param {string} newPath\n * @return {Promise<void>}\n * @alias module:storageBrowser.renameAsync\n * @async\n */\nconst renameAsync = async (oldPath, newPath) => {\n  try {\n    const value = await store.getItem(oldPath)\n    if (value === null) await store.removeItem(newPath)\n    else {\n      await store.setItem(newPath, value)\n      await store.removeItem(oldPath)\n    }\n  } catch (err) {\n    console.warn('An error happened while renaming, skip')\n  }\n}\n\n/**\n * Saves the item at given path.\n * @param {string} file\n * @param {string} data\n * @param {object} [options]\n * @return {Promise<void>}\n * @alias module:storageBrowser.writeFileAsync\n * @async\n */\nconst writeFileAsync = async (file, data, options) => {\n  // Options do not matter in browser setup\n  try {\n    await store.setItem(file, data)\n  } catch (error) {\n    console.warn('An error happened while writing, skip')\n  }\n}\n\n/**\n * Append to the item at given path.\n * @function\n * @param {string} filename\n * @param {string} toAppend\n * @param {object} [options]\n * @return {Promise<void>}\n * @alias module:storageBrowser.appendFileAsync\n * @async\n */\nconst appendFileAsync = async (filename, toAppend, options) => {\n  // Options do not matter in browser setup\n  try {\n    const contents = (await store.getItem(filename)) || ''\n    await store.setItem(filename, contents + toAppend)\n  } catch (error) {\n    console.warn('An error happened appending to file writing, skip')\n  }\n}\n\n/**\n * Read data at given path.\n * @function\n * @param {string} filename\n * @param {object} [options]\n * @return {Promise<Buffer>}\n * @alias module:storageBrowser.readFileAsync\n * @async\n */\nconst readFileAsync = async (filename, options) => {\n  try {\n    return (await store.getItem(filename)) || ''\n  } catch (error) {\n    console.warn('An error happened while reading, skip')\n    return ''\n  }\n}\n\n/**\n * Async version of {@link module:storageBrowser.unlink}.\n * @function\n * @param {string} filename\n * @return {Promise<void>}\n * @async\n * @alias module:storageBrowser.unlink\n */\nconst unlinkAsync = async filename => {\n  try {\n    await store.removeItem(filename)\n  } catch (error) {\n    console.warn('An error happened while unlinking, skip')\n  }\n}\n\n/**\n * Shim for {@link module:storage.mkdirAsync}, nothing to do, no directories will be used on the browser.\n * @function\n * @param {string} path\n * @param {object} [options]\n * @return {Promise<void|string>}\n * @alias module:storageBrowser.mkdirAsync\n * @async\n */\nconst mkdirAsync = (path, options) => Promise.resolve()\n\n/**\n * Shim for {@link module:storage.ensureParentDirectoryExistsAsync}, nothing to do, no directories will be used on the browser.\n * @function\n * @param {string} file\n * @param {number} [mode]\n * @return {Promise<void|string>}\n * @alias module:storageBrowser.ensureParentDirectoryExistsAsync\n * @async\n */\nconst ensureParentDirectoryExistsAsync = async (file, mode) => Promise.resolve()\n\n/**\n * Shim for {@link module:storage.ensureDatafileIntegrityAsync}, nothing to do, no data corruption possible in the browser.\n * @param {string} filename\n * @return {Promise<void>}\n * @alias module:storageBrowser.ensureDatafileIntegrityAsync\n */\nconst ensureDatafileIntegrityAsync = (filename) => Promise.resolve()\n\n/**\n * Fully write or rewrite the datafile, immune to crashes during the write operation (data will not be lost)\n * * @param {string} filename\n * @param {string[]} lines\n * @return {Promise<void>}\n * @alias module:storageBrowser.crashSafeWriteFileLinesAsync\n */\nconst crashSafeWriteFileLinesAsync = async (filename, lines) => {\n  lines.push('') // Add final new line\n  await writeFileAsync(filename, lines.join('\\n'))\n}\n\n// Interface\nmodule.exports.existsAsync = existsAsync\n\nmodule.exports.renameAsync = renameAsync\n\nmodule.exports.writeFileAsync = writeFileAsync\n\nmodule.exports.crashSafeWriteFileLinesAsync = crashSafeWriteFileLinesAsync\n\nmodule.exports.appendFileAsync = appendFileAsync\n\nmodule.exports.readFileAsync = readFileAsync\n\nmodule.exports.unlinkAsync = unlinkAsync\n\nmodule.exports.mkdirAsync = mkdirAsync\n\nmodule.exports.ensureDatafileIntegrityAsync = ensureDatafileIntegrityAsync\n\nmodule.exports.ensureParentDirectoryExistsAsync = ensureParentDirectoryExistsAsync\n", "const { deprecate } = require('util')\nconst byline = require('./byline')\nconst customUtils = require('./customUtils.js')\nconst Index = require('./indexes.js')\nconst model = require('./model.js')\nconst storage = require('./storage.js')\n\nconst DEFAULT_DIR_MODE = 0o755\nconst DEFAULT_FILE_MODE = 0o644\n\n/**\n * Under the hood, NeDB's persistence uses an append-only format, meaning that all\n * updates and deletes actually result in lines added at the end of the datafile,\n * for performance reasons. The database is automatically compacted (i.e. put back\n * in the one-line-per-document format) every time you load each database within\n * your application.\n *\n * Persistence handles the compaction exposed in the Datastore {@link Datastore#compactDatafileAsync},\n * {@link Datastore#setAutocompactionInterval}.\n *\n * Since version 3.0.0, using {@link Datastore.persistence} methods manually is deprecated.\n *\n * Compaction takes a bit of time (not too much: 130ms for 50k\n * records on a typical development machine) and no other operation can happen when\n * it does, so most projects actually don't need to use it.\n *\n * Compaction will also immediately remove any documents whose data line has become\n * corrupted, assuming that the total percentage of all corrupted documents in that\n * database still falls below the specified `corruptAlertThreshold` option's value.\n *\n * Durability works similarly to major databases: compaction forces the OS to\n * physically flush data to disk, while appends to the data file do not (the OS is\n * responsible for flushing the data). That guarantees that a server crash can\n * never cause complete data loss, while preserving performance. The worst that can\n * happen is a crash between two syncs, causing a loss of all data between the two\n * syncs. Usually syncs are 30 seconds appart so that's at most 30 seconds of\n * data. [This post by Antirez on Redis persistence](http://oldblog.antirez.com/post/redis-persistence-demystified.html)\n * explains this in more details, NeDB being very close to Redis AOF persistence\n * with `appendfsync` option set to `no`.\n */\nclass Persistence {\n  /**\n   * Create a new Persistence object for database options.db\n   * @param {Datastore} options.db\n   * @param {Number} [options.corruptAlertThreshold] Optional, threshold after which an alert is thrown if too much data is corrupt\n   * @param {serializationHook} [options.beforeDeserialization] Hook you can use to transform data after it was serialized and before it is written to disk.\n   * @param {serializationHook} [options.afterSerialization] Inverse of `afterSerialization`.\n   * @param {object} [options.modes] Modes to use for FS permissions. Will not work on Windows.\n   * @param {number} [options.modes.fileMode=0o644] Mode to use for files.\n   * @param {number} [options.modes.dirMode=0o755] Mode to use for directories.\n   * @param {boolean} [options.testSerializationHooks=true] Whether to test the serialization hooks or not, might be CPU-intensive\n   */\n  constructor (options) {\n    this.db = options.db\n    this.inMemoryOnly = this.db.inMemoryOnly\n    this.filename = this.db.filename\n    this.corruptAlertThreshold = options.corruptAlertThreshold !== undefined ? options.corruptAlertThreshold : 0.1\n    this.modes = options.modes !== undefined ? options.modes : { fileMode: DEFAULT_FILE_MODE, dirMode: DEFAULT_DIR_MODE }\n    if (this.modes.fileMode === undefined) this.modes.fileMode = DEFAULT_FILE_MODE\n    if (this.modes.dirMode === undefined) this.modes.dirMode = DEFAULT_DIR_MODE\n    if (\n      !this.inMemoryOnly &&\n      this.filename &&\n      this.filename.charAt(this.filename.length - 1) === '~'\n    ) throw new Error('The datafile name can\\'t end with a ~, which is reserved for crash safe backup files')\n\n    // After serialization and before deserialization hooks with some basic sanity checks\n    if (\n      options.afterSerialization &&\n      !options.beforeDeserialization\n    ) throw new Error('Serialization hook defined but deserialization hook undefined, cautiously refusing to start NeDB to prevent dataloss')\n    if (\n      !options.afterSerialization &&\n      options.beforeDeserialization\n    ) throw new Error('Serialization hook undefined but deserialization hook defined, cautiously refusing to start NeDB to prevent dataloss')\n\n    this.afterSerialization = options.afterSerialization || (s => s)\n    this.beforeDeserialization = options.beforeDeserialization || (s => s)\n\n    if (options.testSerializationHooks === undefined || options.testSerializationHooks) {\n      for (let i = 1; i < 30; i += 1) {\n        for (let j = 0; j < 10; j += 1) {\n          const randomString = customUtils.uid(i)\n          if (this.beforeDeserialization(this.afterSerialization(randomString)) !== randomString) {\n            throw new Error('beforeDeserialization is not the reverse of afterSerialization, cautiously refusing to start NeDB to prevent dataloss')\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Internal version without using the {@link Datastore#executor} of {@link Datastore#compactDatafileAsync}, use it instead.\n   * @return {Promise<void>}\n   * @private\n   */\n  async persistCachedDatabaseAsync () {\n    const lines = []\n\n    if (this.inMemoryOnly) return\n\n    this.db.getAllData().forEach(doc => {\n      lines.push(this.afterSerialization(model.serialize(doc)))\n    })\n    Object.keys(this.db.indexes).forEach(fieldName => {\n      if (fieldName !== '_id') { // The special _id index is managed by datastore.js, the others need to be persisted\n        lines.push(this.afterSerialization(model.serialize({\n          $$indexCreated: {\n            fieldName: this.db.indexes[fieldName].fieldName,\n            unique: this.db.indexes[fieldName].unique,\n            sparse: this.db.indexes[fieldName].sparse\n          }\n        })))\n      }\n    })\n\n    await storage.crashSafeWriteFileLinesAsync(this.filename, lines, this.modes)\n    this.db.emit('compaction.done')\n  }\n\n  /**\n   * @see Datastore#compactDatafile\n   * @deprecated\n   * @param {NoParamCallback} [callback = () => {}]\n   * @see Persistence#compactDatafileAsync\n   */\n  compactDatafile (callback) {\n    deprecate(_callback => this.db.compactDatafile(_callback), '@seald-io/nedb: calling Datastore#persistence#compactDatafile is deprecated, please use Datastore#compactDatafile, it will be removed in the next major version.')(callback)\n  }\n\n  /**\n   * @see Datastore#setAutocompactionInterval\n   * @deprecated\n   */\n  setAutocompactionInterval (interval) {\n    deprecate(_interval => this.db.setAutocompactionInterval(_interval), '@seald-io/nedb: calling Datastore#persistence#setAutocompactionInterval is deprecated, please use Datastore#setAutocompactionInterval, it will be removed in the next major version.')(interval)\n  }\n\n  /**\n   * @see Datastore#stopAutocompaction\n   * @deprecated\n   */\n  stopAutocompaction () {\n    deprecate(() => this.db.stopAutocompaction(), '@seald-io/nedb: calling Datastore#persistence#stopAutocompaction is deprecated, please use Datastore#stopAutocompaction, it will be removed in the next major version.')()\n  }\n\n  /**\n   * Persist new state for the given newDocs (can be insertion, update or removal)\n   * Use an append-only format\n   *\n   * Do not use directly, it should only used by a {@link Datastore} instance.\n   * @param {document[]} newDocs Can be empty if no doc was updated/removed\n   * @return {Promise}\n   * @private\n   */\n  async persistNewStateAsync (newDocs) {\n    let toPersist = ''\n\n    // In-memory only datastore\n    if (this.inMemoryOnly) return\n\n    newDocs.forEach(doc => {\n      toPersist += this.afterSerialization(model.serialize(doc)) + '\\n'\n    })\n\n    if (toPersist.length === 0) return\n\n    await storage.appendFileAsync(this.filename, toPersist, { encoding: 'utf8', mode: this.modes.fileMode })\n  }\n\n  /**\n   * @typedef rawIndex\n   * @property {string} fieldName\n   * @property {boolean} [unique]\n   * @property {boolean} [sparse]\n   */\n\n  /**\n   * From a database's raw data, return the corresponding machine understandable collection.\n   *\n   * Do not use directly, it should only used by a {@link Datastore} instance.\n   * @param {string} rawData database file\n   * @return {{data: document[], indexes: Object.<string, rawIndex>}}\n   * @private\n   */\n  treatRawData (rawData) {\n    const data = rawData.split('\\n')\n    const dataById = {}\n    const indexes = {}\n    let dataLength = data.length\n\n    // Last line of every data file is usually blank so not really corrupt\n    let corruptItems = 0\n\n    for (const datum of data) {\n      if (datum === '') { dataLength--; continue }\n      try {\n        const doc = model.deserialize(this.beforeDeserialization(datum))\n        if (doc._id) {\n          if (doc.$$deleted === true) delete dataById[doc._id]\n          else dataById[doc._id] = doc\n        } else if (doc.$$indexCreated && doc.$$indexCreated.fieldName != null) indexes[doc.$$indexCreated.fieldName] = doc.$$indexCreated\n        else if (typeof doc.$$indexRemoved === 'string') delete indexes[doc.$$indexRemoved]\n      } catch (e) {\n        corruptItems += 1\n      }\n    }\n\n    // A bit lenient on corruption\n    if (dataLength > 0) {\n      const corruptionRate = corruptItems / dataLength\n      if (corruptionRate > this.corruptAlertThreshold) {\n        const error = new Error(`${Math.floor(100 * corruptionRate)}% of the data file is corrupt, more than given corruptAlertThreshold (${Math.floor(100 * this.corruptAlertThreshold)}%). Cautiously refusing to start NeDB to prevent dataloss.`)\n        error.corruptionRate = corruptionRate\n        error.corruptItems = corruptItems\n        error.dataLength = dataLength\n        throw error\n      }\n    }\n\n    const tdata = Object.values(dataById)\n\n    return { data: tdata, indexes }\n  }\n\n  /**\n   * From a database's raw data stream, return the corresponding machine understandable collection\n   * Is only used by a {@link Datastore} instance.\n   *\n   * Is only used in the Node.js version, since [React-Native]{@link module:storageReactNative} &\n   * [browser]{@link module:storageBrowser} storage modules don't provide an equivalent of\n   * {@link module:storage.readFileStream}.\n   *\n   * Do not use directly, it should only used by a {@link Datastore} instance.\n   * @param {Readable} rawStream\n   * @return {Promise<{data: document[], indexes: Object.<string, rawIndex>}>}\n   * @async\n   * @private\n   */\n  treatRawStreamAsync (rawStream) {\n    return new Promise((resolve, reject) => {\n      const dataById = {}\n\n      const indexes = {}\n\n      let corruptItems = 0\n\n      const lineStream = byline(rawStream)\n      let dataLength = 0\n\n      lineStream.on('data', (line) => {\n        if (line === '') return\n        try {\n          const doc = model.deserialize(this.beforeDeserialization(line))\n          if (doc._id) {\n            if (doc.$$deleted === true) delete dataById[doc._id]\n            else dataById[doc._id] = doc\n          } else if (doc.$$indexCreated && doc.$$indexCreated.fieldName != null) indexes[doc.$$indexCreated.fieldName] = doc.$$indexCreated\n          else if (typeof doc.$$indexRemoved === 'string') delete indexes[doc.$$indexRemoved]\n        } catch (e) {\n          corruptItems += 1\n        }\n\n        dataLength++\n      })\n\n      lineStream.on('end', () => {\n        // A bit lenient on corruption\n        if (dataLength > 0) {\n          const corruptionRate = corruptItems / dataLength\n          if (corruptionRate > this.corruptAlertThreshold) {\n            const error = new Error(`${Math.floor(100 * corruptionRate)}% of the data file is corrupt, more than given corruptAlertThreshold (${Math.floor(100 * this.corruptAlertThreshold)}%). Cautiously refusing to start NeDB to prevent dataloss.`)\n            error.corruptionRate = corruptionRate\n            error.corruptItems = corruptItems\n            error.dataLength = dataLength\n            reject(error, null)\n            return\n          }\n        }\n        const data = Object.values(dataById)\n\n        resolve({ data, indexes })\n      })\n\n      lineStream.on('error', function (err) {\n        reject(err, null)\n      })\n    })\n  }\n\n  /**\n   * Load the database\n   * 1) Create all indexes\n   * 2) Insert all data\n   * 3) Compact the database\n   *\n   * This means pulling data out of the data file or creating it if it doesn't exist\n   * Also, all data is persisted right away, which has the effect of compacting the database file\n   * This operation is very quick at startup for a big collection (60ms for ~10k docs)\n   *\n   * Do not use directly as it does not use the [Executor]{@link Datastore.executor}, use {@link Datastore#loadDatabaseAsync} instead.\n   * @return {Promise<void>}\n   * @private\n   */\n  async loadDatabaseAsync () {\n    this.db._resetIndexes()\n\n    // In-memory only datastore\n    if (this.inMemoryOnly) return\n    await Persistence.ensureParentDirectoryExistsAsync(this.filename, this.modes.dirMode)\n    await storage.ensureDatafileIntegrityAsync(this.filename, this.modes.fileMode)\n\n    let treatedData\n    if (storage.readFileStream) {\n      // Server side\n      const fileStream = storage.readFileStream(this.filename, { encoding: 'utf8', mode: this.modes.fileMode })\n      treatedData = await this.treatRawStreamAsync(fileStream)\n    } else {\n      // Browser\n      const rawData = await storage.readFileAsync(this.filename, { encoding: 'utf8', mode: this.modes.fileMode })\n      treatedData = this.treatRawData(rawData)\n    }\n    // Recreate all indexes in the datafile\n    Object.keys(treatedData.indexes).forEach(key => {\n      this.db.indexes[key] = new Index(treatedData.indexes[key])\n    })\n\n    // Fill cached database (i.e. all indexes) with data\n    try {\n      this.db._resetIndexes(treatedData.data)\n    } catch (e) {\n      this.db._resetIndexes() // Rollback any index which didn't fail\n      throw e\n    }\n\n    await this.db.persistence.persistCachedDatabaseAsync()\n    this.db.executor.processBuffer()\n  }\n\n  /**\n   * See {@link Datastore#dropDatabaseAsync}. This function uses {@link Datastore#executor} internally. Decorating this\n   * function with an {@link Executor#pushAsync} will result in a deadlock.\n   * @return {Promise<void>}\n   * @private\n   * @see Datastore#dropDatabaseAsync\n   */\n  async dropDatabaseAsync () {\n    this.db.stopAutocompaction() // stop autocompaction\n    this.db.executor.ready = false // prevent queuing new tasks\n    this.db.executor.resetBuffer() // remove pending buffered tasks\n    await this.db.executor.queue.guardian // wait for the ongoing tasks to end\n    // remove indexes (which means remove data from memory)\n    this.db.indexes = {}\n    // add back _id index, otherwise it will fail\n    this.db.indexes._id = new Index({ fieldName: '_id', unique: true })\n    // reset TTL on indexes\n    this.db.ttlIndexes = {}\n\n    // remove datastore file\n    if (!this.db.inMemoryOnly) {\n      await this.db.executor.pushAsync(async () => {\n        if (await storage.existsAsync(this.filename)) await storage.unlinkAsync(this.filename)\n      }, true)\n    }\n  }\n\n  /**\n   * Check if a directory stat and create it on the fly if it is not the case.\n   * @param {string} dir\n   * @param {number} [mode=0o777]\n   * @return {Promise<void>}\n   * @private\n   */\n  static async ensureParentDirectoryExistsAsync (dir, mode = DEFAULT_DIR_MODE) {\n    return storage.ensureParentDirectoryExistsAsync(dir, mode)\n  }\n}\n\n// Interface\nmodule.exports = Persistence\n", "const { EventEmitter } = require('events')\nconst { callbackify, deprecate } = require('util')\nconst Cursor = require('./cursor.js')\nconst customUtils = require('./customUtils.js')\nconst Executor = require('./executor.js')\nconst Index = require('./indexes.js')\nconst model = require('./model.js')\nconst Persistence = require('./persistence.js')\nconst { isDate, pick, filterIndexNames } = require('./utils.js')\n\n/**\n * Callback with no parameter\n * @callback NoParamCallback\n * @param {?Error} err\n */\n\n/**\n * String comparison function.\n * ```\n *   if (a < b) return -1\n *   if (a > b) return 1\n *   return 0\n * ```\n * @callback compareStrings\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\n\n/**\n * Callback that returns an Array of documents.\n * @callback MultipleDocumentsCallback\n * @param {?Error} err\n * @param {?document[]} docs\n */\n\n/**\n * Callback that returns a single document.\n * @callback SingleDocumentCallback\n * @param {?Error} err\n * @param {?document} docs\n */\n\n/**\n * Generic async function.\n * @callback AsyncFunction\n * @param {...*} args\n * @return {Promise<*>}\n */\n\n/**\n * Callback with generic parameters.\n * @callback GenericCallback\n * @param {?Error} err\n * @param {...*} args\n */\n\n/**\n * Compaction event. Happens when the Datastore's Persistence has been compacted.\n * It happens when calling {@link Datastore#compactDatafileAsync}, which is called periodically if you have called\n * {@link Datastore#setAutocompactionInterval}.\n *\n * @event Datastore#event:\"compaction.done\"\n * @type {undefined}\n */\n\n/**\n * Generic document in NeDB.\n * It consists of an Object with anything you want inside.\n * @typedef document\n * @property {?string} [_id] Internal `_id` of the document, which can be `null` or undefined at some points (when not\n * inserted yet for example).\n * @type {object}\n */\n\n/**\n * Nedb query.\n *\n * Each key of a query references a field name, which can use the dot-notation to reference subfields inside nested\n * documents, arrays, arrays of subdocuments and to match a specific element of an array.\n *\n * Each value of a query can be one of the following:\n * - `string`: matches all documents which have this string as value for the referenced field name\n * - `number`: matches all documents which have this number as value for the referenced field name\n * - `Regexp`: matches all documents which have a value that matches the given `Regexp` for the referenced field name\n * - `object`: matches all documents which have this object as deep-value for the referenced field name\n * - Comparison operators: the syntax is `{ field: { $op: value } }` where `$op` is any comparison operator:\n *   - `$lt`, `$lte`: less than, less than or equal\n *   - `$gt`, `$gte`: greater than, greater than or equal\n *   - `$in`: member of. `value` must be an array of values\n *   - `$ne`, `$nin`: not equal, not a member of\n *   - `$exists`: checks whether the document posses the property `field`. `value` should be true or false\n *   - `$regex`: checks whether a string is matched by the regular expression. Contrary to MongoDB, the use of\n *   `$options` with `$regex` is not supported, because it doesn't give you more power than regex flags. Basic\n *   queries are more readable so only use the `$regex` operator when you need to use another operator with it\n *   - `$size`: if the referenced filed is an Array, matches on the size of the array\n *   - `$elemMatch`: matches if at least one array element matches the sub-query entirely\n * - Logical operators: You can combine queries using logical operators:\n *   - For `$or` and `$and`, the syntax is `{ $op: [query1, query2, ...] }`.\n *   - For `$not`, the syntax is `{ $not: query }`\n *   - For `$where`, the syntax is:\n *   ```\n *   { $where: function () {\n *     // object is 'this'\n *     // return a boolean\n *   } }\n *   ```\n * @typedef query\n * @type {Object.<string, *>}\n */\n\n/**\n * Nedb projection.\n *\n * You can give `find` and `findOne` an optional second argument, `projections`.\n * The syntax is the same as MongoDB: `{ a: 1, b: 1 }` to return only the `a`\n * and `b` fields, `{ a: 0, b: 0 }` to omit these two fields. You cannot use both\n * modes at the time, except for `_id` which is by default always returned and\n * which you can choose to omit. You can project on nested documents.\n *\n * To reference subfields, you can use the dot-notation.\n *\n * @typedef projection\n * @type {Object.<string, 0|1>}\n */\n\n/**\n * The `beforeDeserialization` and `afterDeserialization` callbacks are hooks which are executed respectively before\n * parsing each document and after stringifying them. They can be used for example to encrypt the Datastore.\n * The `beforeDeserialization` should revert what `afterDeserialization` has done.\n * @callback serializationHook\n * @param {string} x\n * @return {string}\n */\n\n/**\n * @external EventEmitter\n * @see http://nodejs.org/api/events.html\n */\n\n/**\n * @class\n * @classdesc The `Datastore` class is the main class of NeDB.\n * @extends external:EventEmitter\n * @emits Datastore#event:\"compaction.done\"\n * @typicalname NeDB\n */\nclass Datastore extends EventEmitter {\n  /**\n   * Create a new collection, either persistent or in-memory.\n   *\n   * If you use a persistent datastore without the `autoload` option, you need to call {@link Datastore#loadDatabase} or\n   * {@link Datastore#loadDatabaseAsync} manually. This function fetches the data from datafile and prepares the database.\n   * **Don't forget it!** If you use a persistent datastore, no command (insert, find, update, remove) will be executed\n   * before it is called, so make sure to call it yourself or use the `autoload` option.\n   *\n   * Also, if loading fails, all commands registered to the {@link Datastore#executor} afterwards will not be executed.\n   * They will be registered and executed, in sequence, only after a successful loading.\n   *\n   * @param {object|string} options Can be an object or a string. If options is a string, the behavior is the same as in\n   * v0.6: it will be interpreted as `options.filename`. **Giving a string is deprecated, and will be removed in the\n   * next major version.**\n   * @param {string} [options.filename = null] Path to the file where the data is persisted. If left blank, the datastore is\n   * automatically considered in-memory only. It cannot end with a `~` which is used in the temporary files NeDB uses to\n   * perform crash-safe writes. Not used if `options.inMemoryOnly` is `true`.\n   * @param {boolean} [options.inMemoryOnly = false] If set to true, no data will be written in storage. This option has\n   * priority over `options.filename`.\n   * @param {object} [options.modes] Permissions to use for FS. Only used for Node.js storage module. Will not work on Windows.\n   * @param {number} [options.modes.fileMode = 0o644] Permissions to use for database files\n   * @param {number} [options.modes.dirMode = 0o755] Permissions to use for database directories\n   * @param {boolean} [options.timestampData = false] If set to true, createdAt and updatedAt will be created and\n   * populated automatically (if not specified by user)\n   * @param {boolean} [options.autoload = false] If used, the database will automatically be loaded from the datafile\n   * upon creation (you don't need to call `loadDatabase`). Any command issued before load is finished is buffered and\n   * will be executed when load is done. When autoloading is done, you can either use the `onload` callback, or you can\n   * use `this.autoloadPromise` which resolves (or rejects) when autloading is done.\n   * @param {NoParamCallback} [options.onload] If you use autoloading, this is the handler called after the `loadDatabase`. It\n   * takes one `error` argument. If you use autoloading without specifying this handler, and an error happens during\n   * load, an error will be thrown.\n   * @param {serializationHook} [options.beforeDeserialization] Hook you can use to transform data after it was serialized and\n   * before it is written to disk. Can be used for example to encrypt data before writing database to disk. This\n   * function takes a string as parameter (one line of an NeDB data file) and outputs the transformed string, **which\n   * must absolutely not contain a `\\n` character** (or data will be lost).\n   * @param {serializationHook} [options.afterSerialization] Inverse of `afterSerialization`. Make sure to include both and not\n   * just one, or you risk data loss. For the same reason, make sure both functions are inverses of one another. Some\n   * failsafe mechanisms are in place to prevent data loss if you misuse the serialization hooks: NeDB checks that never\n   * one is declared without the other, and checks that they are reverse of one another by testing on random strings of\n   * various lengths. In addition, if too much data is detected as corrupt, NeDB will refuse to start as it could mean\n   * you're not using the deserialization hook corresponding to the serialization hook used before.\n   * @param {number} [options.corruptAlertThreshold = 0.1] Between 0 and 1, defaults to 10%. NeDB will refuse to start\n   * if more than this percentage of the datafile is corrupt. 0 means you don't tolerate any corruption, 1 means you\n   * don't care.\n   * @param {compareStrings} [options.compareStrings] If specified, it overrides default string comparison which is not\n   * well adapted to non-US characters in particular accented letters. Native `localCompare` will most of the time be\n   * the right choice.\n   * @param {boolean} [options.testSerializationHooks=true] Whether to test the serialization hooks or not,\n   * might be CPU-intensive\n   */\n  constructor (options) {\n    super()\n    let filename\n\n    // Retrocompatibility with v0.6 and before\n    if (typeof options === 'string') {\n      deprecate(() => {\n        filename = options\n        this.inMemoryOnly = false // Default\n      }, '@seald-io/nedb: Giving a string to the Datastore constructor is deprecated and will be removed in the next major version. Please use an options object with an argument \\'filename\\'.')()\n    } else {\n      options = options || {}\n      filename = options.filename\n      /**\n       * Determines if the `Datastore` keeps data in-memory, or if it saves it in storage. Is not read after\n       * instanciation.\n       * @type {boolean}\n       * @protected\n       */\n      this.inMemoryOnly = options.inMemoryOnly || false\n      /**\n       * Determines if the `Datastore` should autoload the database upon instantiation. Is not read after instanciation.\n       * @type {boolean}\n       * @protected\n       */\n      this.autoload = options.autoload || false\n      /**\n       * Determines if the `Datastore` should add `createdAt` and `updatedAt` fields automatically if not set by the user.\n       * @type {boolean}\n       * @protected\n       */\n      this.timestampData = options.timestampData || false\n    }\n\n    // Determine whether in memory or persistent\n    if (!filename || typeof filename !== 'string' || filename.length === 0) {\n      /**\n       * If null, it means `inMemoryOnly` is `true`. The `filename` is the name given to the storage module. Is not read\n       * after instanciation.\n       * @type {?string}\n       * @protected\n       */\n      this.filename = null\n      this.inMemoryOnly = true\n    } else {\n      this.filename = filename\n    }\n\n    // String comparison function\n    /**\n     * Overrides default string comparison which is not well adapted to non-US characters in particular accented\n     * letters. Native `localCompare` will most of the time be the right choice\n     * @type {compareStrings}\n     * @function\n     * @protected\n     */\n    this.compareStrings = options.compareStrings\n\n    // Persistence handling\n    /**\n     * The `Persistence` instance for this `Datastore`.\n     * @type {Persistence}\n     */\n    this.persistence = new Persistence({\n      db: this,\n      afterSerialization: options.afterSerialization,\n      beforeDeserialization: options.beforeDeserialization,\n      corruptAlertThreshold: options.corruptAlertThreshold,\n      modes: options.modes,\n      testSerializationHooks: options.testSerializationHooks\n    })\n\n    // This new executor is ready if we don't use persistence\n    // If we do, it will only be ready once loadDatabase is called\n    /**\n     * The `Executor` instance for this `Datastore`. It is used in all methods exposed by the {@link Datastore},\n     * any {@link Cursor} produced by the `Datastore` and by {@link Datastore#compactDatafileAsync} to ensure operations\n     * are performed sequentially in the database.\n     * @type {Executor}\n     * @protected\n     */\n    this.executor = new Executor()\n    if (this.inMemoryOnly) this.executor.ready = true\n\n    /**\n     * Indexed by field name, dot notation can be used.\n     * _id is always indexed and since _ids are generated randomly the underlying binary search tree is always well-balanced\n     * @type {Object.<string, Index>}\n     * @protected\n     */\n    this.indexes = {}\n    this.indexes._id = new Index({ fieldName: '_id', unique: true })\n    /**\n     * Stores the time to live (TTL) of the indexes created. The key represents the field name, the value the number of\n     * seconds after which data with this index field should be removed.\n     * @type {Object.<string, number>}\n     * @protected\n     */\n    this.ttlIndexes = {}\n\n    // Queue a load of the database right away and call the onload handler\n    // By default (no onload handler), if there is an error there, no operation will be possible so warn the user by throwing an exception\n    if (this.autoload) {\n      /**\n       * A Promise that resolves when the autoload has finished.\n       *\n       * The onload callback is not awaited by this Promise, it is started immediately after that.\n       * @type {?Promise}\n       */\n      this.autoloadPromise = this.loadDatabaseAsync()\n      this.autoloadPromise\n        .then(() => {\n          if (options.onload) options.onload()\n        }, err => {\n          if (options.onload) options.onload(err)\n          else throw err\n        })\n    } else this.autoloadPromise = null\n    /**\n     * Interval if {@link Datastore#setAutocompactionInterval} was called.\n     * @private\n     * @type {null|number}\n     */\n    this._autocompactionIntervalId = null\n  }\n\n  /**\n   * Queue a compaction/rewrite of the datafile.\n   * It works by rewriting the database file, and compacts it since the cache always contains only the number of\n   * documents in the collection while the data file is append-only so it may grow larger.\n   *\n   * @async\n   */\n  compactDatafileAsync () {\n    return this.executor.pushAsync(() => this.persistence.persistCachedDatabaseAsync())\n  }\n\n  /**\n   * Callback version of {@link Datastore#compactDatafileAsync}.\n   * @param {NoParamCallback} [callback = () => {}]\n   * @see Datastore#compactDatafileAsync\n   */\n  compactDatafile (callback) {\n    const promise = this.compactDatafileAsync()\n    if (typeof callback === 'function') callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Set automatic compaction every `interval` ms\n   * @param {Number} interval in milliseconds, with an enforced minimum of 5000 milliseconds\n   */\n  setAutocompactionInterval (interval) {\n    const minInterval = 5000\n    if (Number.isNaN(Number(interval))) throw new Error('Interval must be a non-NaN number')\n    const realInterval = Math.max(Number(interval), minInterval)\n\n    this.stopAutocompaction()\n\n    this._autocompactionIntervalId = setInterval(() => {\n      this.compactDatafile()\n    }, realInterval)\n  }\n\n  /**\n   * Stop autocompaction (do nothing if automatic compaction was not running)\n   */\n  stopAutocompaction () {\n    if (this._autocompactionIntervalId) {\n      clearInterval(this._autocompactionIntervalId)\n      this._autocompactionIntervalId = null\n    }\n  }\n\n  /**\n   * Callback version of {@link Datastore#loadDatabaseAsync}.\n   * @param {NoParamCallback} [callback]\n   * @see Datastore#loadDatabaseAsync\n   */\n  loadDatabase (callback) {\n    const promise = this.loadDatabaseAsync()\n    if (typeof callback === 'function') callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Stops auto-compaction, finishes all queued operations, drops the database both in memory and in storage.\n   * **WARNING**: it is not recommended re-using an instance of NeDB if its database has been dropped, it is\n   * preferable to instantiate a new one.\n   * @async\n   * @return {Promise}\n   */\n  dropDatabaseAsync () {\n    return this.persistence.dropDatabaseAsync() // the executor is exceptionally used by Persistence\n  }\n\n  /**\n   * Callback version of {@link Datastore#dropDatabaseAsync}.\n   * @param {NoParamCallback} [callback]\n   * @see Datastore#dropDatabaseAsync\n   */\n  dropDatabase (callback) {\n    const promise = this.dropDatabaseAsync()\n    if (typeof callback === 'function') callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Load the database from the datafile, and trigger the execution of buffered commands if any.\n   * @async\n   * @return {Promise}\n   */\n  loadDatabaseAsync () {\n    return this.executor.pushAsync(() => this.persistence.loadDatabaseAsync(), true)\n  }\n\n  /**\n   * Get an array of all the data in the database.\n   * @return {document[]}\n   */\n  getAllData () {\n    return this.indexes._id.getAll()\n  }\n\n  /**\n   * Reset all currently defined indexes.\n   * @param {?document|?document[]} [newData]\n   * @private\n   */\n  _resetIndexes (newData) {\n    for (const index of Object.values(this.indexes)) {\n      index.reset(newData)\n    }\n  }\n\n  /**\n   * Callback version of {@link Datastore#ensureIndex}.\n   * @param {object} options\n   * @param {string|string[]} options.fieldName\n   * @param {boolean} [options.unique = false]\n   * @param {boolean} [options.sparse = false]\n   * @param {number} [options.expireAfterSeconds]\n   * @param {NoParamCallback} [callback]\n   * @see Datastore#ensureIndex\n   */\n  ensureIndex (options = {}, callback) {\n    const promise = this.ensureIndexAsync(options) // to make sure the synchronous part of ensureIndexAsync is executed synchronously\n    if (typeof callback === 'function') callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Ensure an index is kept for this field. Same parameters as lib/indexes\n   * This function acts synchronously on the indexes, however the persistence of the indexes is deferred with the\n   * executor.\n   * @param {object} options\n   * @param {string|string[]} options.fieldName Name of the field to index. Use the dot notation to index a field in a nested\n   * document. For a compound index, use an array of field names. Using a comma in a field name is not permitted.\n   * @param {boolean} [options.unique = false] Enforce field uniqueness. Note that a unique index will raise an error\n   * if you try to index two documents for which the field is not defined.\n   * @param {boolean} [options.sparse = false] Don't index documents for which the field is not defined. Use this option\n   * along with \"unique\" if you want to accept multiple documents for which it is not defined.\n   * @param {number} [options.expireAfterSeconds] - If set, the created index is a TTL (time to live) index, that will\n   * automatically remove documents when the system date becomes larger than the date on the indexed field plus\n   * `expireAfterSeconds`. Documents where the indexed field is not specified or not a `Date` object are ignored.\n   * @return {Promise<void>}\n   */\n  async ensureIndexAsync (options = {}) {\n    if (!options.fieldName) {\n      const err = new Error('Cannot create an index without a fieldName')\n      err.missingFieldName = true\n      throw err\n    }\n\n    const _fields = [].concat(options.fieldName).sort()\n\n    if (_fields.some(field => field.includes(','))) {\n      throw new Error('Cannot use comma in index fieldName')\n    }\n\n    const _options = {\n      ...options,\n      fieldName: _fields.join(',')\n    }\n\n    if (this.indexes[_options.fieldName]) return\n\n    this.indexes[_options.fieldName] = new Index(_options)\n    if (options.expireAfterSeconds !== undefined) this.ttlIndexes[_options.fieldName] = _options.expireAfterSeconds // With this implementation index creation is not necessary to ensure TTL but we stick with MongoDB's API here\n\n    try {\n      this.indexes[_options.fieldName].insert(this.getAllData())\n    } catch (e) {\n      delete this.indexes[_options.fieldName]\n      throw e\n    }\n\n    // We may want to force all options to be persisted including defaults, not just the ones passed the index creation function\n    await this.executor.pushAsync(() => this.persistence.persistNewStateAsync([{ $$indexCreated: _options }]), true)\n  }\n\n  /**\n   * Callback version of {@link Datastore#removeIndexAsync}.\n   * @param {string} fieldName\n   * @param {NoParamCallback} [callback]\n   * @see Datastore#removeIndexAsync\n   */\n  removeIndex (fieldName, callback = () => {}) {\n    const promise = this.removeIndexAsync(fieldName)\n    callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Remove an index.\n   * @param {string} fieldName Field name of the index to remove. Use the dot notation to remove an index referring to a\n   * field in a nested document.\n   * @return {Promise<void>}\n   * @see Datastore#removeIndex\n   */\n  async removeIndexAsync (fieldName) {\n    delete this.indexes[fieldName]\n\n    await this.executor.pushAsync(() => this.persistence.persistNewStateAsync([{ $$indexRemoved: fieldName }]), true)\n  }\n\n  /**\n   * Add one or several document(s) to all indexes.\n   *\n   * This is an internal function.\n   * @param {document} doc\n   * @private\n   */\n  _addToIndexes (doc) {\n    let failingIndex\n    let error\n    const keys = Object.keys(this.indexes)\n\n    for (let i = 0; i < keys.length; i += 1) {\n      try {\n        this.indexes[keys[i]].insert(doc)\n      } catch (e) {\n        failingIndex = i\n        error = e\n        break\n      }\n    }\n\n    // If an error happened, we need to rollback the insert on all other indexes\n    if (error) {\n      for (let i = 0; i < failingIndex; i += 1) {\n        this.indexes[keys[i]].remove(doc)\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Remove one or several document(s) from all indexes.\n   *\n   * This is an internal function.\n   * @param {document} doc\n   * @private\n   */\n  _removeFromIndexes (doc) {\n    for (const index of Object.values(this.indexes)) {\n      index.remove(doc)\n    }\n  }\n\n  /**\n   * Update one or several documents in all indexes.\n   *\n   * To update multiple documents, oldDoc must be an array of { oldDoc, newDoc } pairs.\n   *\n   * If one update violates a constraint, all changes are rolled back.\n   *\n   * This is an internal function.\n   * @param {document|Array.<{oldDoc: document, newDoc: document}>} oldDoc Document to update, or an `Array` of\n   * `{oldDoc, newDoc}` pairs.\n   * @param {document} [newDoc] Document to replace the oldDoc with. If the first argument is an `Array` of\n   * `{oldDoc, newDoc}` pairs, this second argument is ignored.\n   * @private\n   */\n  _updateIndexes (oldDoc, newDoc) {\n    let failingIndex\n    let error\n    const keys = Object.keys(this.indexes)\n\n    for (let i = 0; i < keys.length; i += 1) {\n      try {\n        this.indexes[keys[i]].update(oldDoc, newDoc)\n      } catch (e) {\n        failingIndex = i\n        error = e\n        break\n      }\n    }\n\n    // If an error happened, we need to rollback the update on all other indexes\n    if (error) {\n      for (let i = 0; i < failingIndex; i += 1) {\n        this.indexes[keys[i]].revertUpdate(oldDoc, newDoc)\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get all candidate documents matching the query, regardless of their expiry status.\n   * @param {query} query\n   * @return {document[]}\n   *\n   * @private\n   */\n  _getRawCandidates (query) {\n    const indexNames = Object.keys(this.indexes)\n\n    // STEP 1: get candidates list by checking indexes from most to least frequent usecase\n    // For a basic match\n\n    let usableQuery\n    usableQuery = Object.entries(query)\n      .filter(filterIndexNames(indexNames))\n      .pop()\n    if (usableQuery) return this.indexes[usableQuery[0]].getMatching(usableQuery[1])\n\n    // For a compound match\n    const compoundQueryKeys = indexNames\n      .filter(indexName => indexName.indexOf(',') !== -1)\n      .map(indexName => indexName.split(','))\n      .filter(subIndexNames =>\n        Object.entries(query)\n          .filter(filterIndexNames(subIndexNames)).length === subIndexNames.length\n      )\n\n    if (compoundQueryKeys.length > 0) return this.indexes[compoundQueryKeys[0]].getMatching(pick(query, compoundQueryKeys[0]))\n\n    // For a $in match\n    usableQuery = Object.entries(query)\n      .filter(([k, v]) =>\n        !!(query[k] && Object.prototype.hasOwnProperty.call(query[k], '$in')) &&\n        indexNames.includes(k)\n      )\n      .pop()\n    if (usableQuery) return this.indexes[usableQuery[0]].getMatching(usableQuery[1].$in)\n    // For a comparison match\n    usableQuery = Object.entries(query)\n      .filter(([k, v]) =>\n        !!(query[k] && (Object.prototype.hasOwnProperty.call(query[k], '$lt') || Object.prototype.hasOwnProperty.call(query[k], '$lte') || Object.prototype.hasOwnProperty.call(query[k], '$gt') || Object.prototype.hasOwnProperty.call(query[k], '$gte'))) &&\n        indexNames.includes(k)\n      )\n      .pop()\n    if (usableQuery) return this.indexes[usableQuery[0]].getBetweenBounds(usableQuery[1])\n    // By default, return all the DB data\n    return this.getAllData()\n  }\n\n  /**\n   * Return the list of candidates for a given query\n   * Crude implementation for now, we return the candidates given by the first usable index if any\n   * We try the following query types, in this order: basic match, $in match, comparison match\n   * One way to make it better would be to enable the use of multiple indexes if the first usable index\n   * returns too much data. I may do it in the future.\n   *\n   * Returned candidates will be scanned to find and remove all expired documents\n   *\n   * This is an internal function.\n   * @param {query} query\n   * @param {boolean} [dontExpireStaleDocs = false] If true don't remove stale docs. Useful for the remove function\n   * which shouldn't be impacted by expirations.\n   * @return {Promise<document[]>} candidates\n   * @private\n   */\n  async _getCandidatesAsync (query, dontExpireStaleDocs = false) {\n    const validDocs = []\n\n    // STEP 1: get candidates list by checking indexes from most to least frequent usecase\n    const docs = this._getRawCandidates(query)\n    // STEP 2: remove all expired documents\n    if (!dontExpireStaleDocs) {\n      const expiredDocsIds = []\n      const ttlIndexesFieldNames = Object.keys(this.ttlIndexes)\n\n      docs.forEach(doc => {\n        if (ttlIndexesFieldNames.every(i => !(doc[i] !== undefined && isDate(doc[i]) && Date.now() > doc[i].getTime() + this.ttlIndexes[i] * 1000))) validDocs.push(doc)\n        else expiredDocsIds.push(doc._id)\n      })\n      for (const _id of expiredDocsIds) {\n        await this._removeAsync({ _id }, {})\n      }\n    } else validDocs.push(...docs)\n    return validDocs\n  }\n\n  /**\n   * Insert a new document\n   * This is an internal function, use {@link Datastore#insertAsync} which has the same signature.\n   * @param {document|document[]} newDoc\n   * @return {Promise<document|document[]>}\n   * @private\n   */\n  async _insertAsync (newDoc) {\n    const preparedDoc = this._prepareDocumentForInsertion(newDoc)\n    this._insertInCache(preparedDoc)\n\n    await this.persistence.persistNewStateAsync(Array.isArray(preparedDoc) ? preparedDoc : [preparedDoc])\n    return model.deepCopy(preparedDoc)\n  }\n\n  /**\n   * Create a new _id that's not already in use\n   * @return {string} id\n   * @private\n   */\n  _createNewId () {\n    let attemptId = customUtils.uid(16)\n    // Try as many times as needed to get an unused _id. As explained in customUtils, the probability of this ever happening is extremely small, so this is O(1)\n    if (this.indexes._id.getMatching(attemptId).length > 0) attemptId = this._createNewId()\n    return attemptId\n  }\n\n  /**\n   * Prepare a document (or array of documents) to be inserted in a database\n   * Meaning adds _id and timestamps if necessary on a copy of newDoc to avoid any side effect on user input\n   * @param {document|document[]} newDoc document, or Array of documents, to prepare\n   * @return {document|document[]} prepared document, or Array of prepared documents\n   * @private\n   */\n  _prepareDocumentForInsertion (newDoc) {\n    let preparedDoc\n\n    if (Array.isArray(newDoc)) {\n      preparedDoc = []\n      newDoc.forEach(doc => { preparedDoc.push(this._prepareDocumentForInsertion(doc)) })\n    } else {\n      preparedDoc = model.deepCopy(newDoc)\n      if (preparedDoc._id === undefined) preparedDoc._id = this._createNewId()\n      const now = new Date()\n      if (this.timestampData && preparedDoc.createdAt === undefined) preparedDoc.createdAt = now\n      if (this.timestampData && preparedDoc.updatedAt === undefined) preparedDoc.updatedAt = now\n      model.checkObject(preparedDoc)\n    }\n\n    return preparedDoc\n  }\n\n  /**\n   * If newDoc is an array of documents, this will insert all documents in the cache\n   * @param {document|document[]} preparedDoc\n   * @private\n   */\n  _insertInCache (preparedDoc) {\n    if (Array.isArray(preparedDoc)) this._insertMultipleDocsInCache(preparedDoc)\n    else this._addToIndexes(preparedDoc)\n  }\n\n  /**\n   * If one insertion fails (e.g. because of a unique constraint), roll back all previous\n   * inserts and throws the error\n   * @param {document[]} preparedDocs\n   * @private\n   */\n  _insertMultipleDocsInCache (preparedDocs) {\n    let failingIndex\n    let error\n\n    for (let i = 0; i < preparedDocs.length; i += 1) {\n      try {\n        this._addToIndexes(preparedDocs[i])\n      } catch (e) {\n        error = e\n        failingIndex = i\n        break\n      }\n    }\n\n    if (error) {\n      for (let i = 0; i < failingIndex; i += 1) {\n        this._removeFromIndexes(preparedDocs[i])\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Callback version of {@link Datastore#insertAsync}.\n   * @param {document|document[]} newDoc\n   * @param {SingleDocumentCallback|MultipleDocumentsCallback} [callback]\n   * @see Datastore#insertAsync\n   */\n  insert (newDoc, callback) {\n    const promise = this.insertAsync(newDoc)\n    if (typeof callback === 'function') callbackify(() => promise)(callback)\n  }\n\n  /**\n   * Insert a new document, or new documents.\n   * @param {document|document[]} newDoc Document or array of documents to insert.\n   * @return {Promise<document|document[]>} The document(s) inserted.\n   * @async\n   */\n  insertAsync (newDoc) {\n    return this.executor.pushAsync(() => this._insertAsync(newDoc))\n  }\n\n  /**\n   * Callback for {@link Datastore#countCallback}.\n   * @callback Datastore~countCallback\n   * @param {?Error} err\n   * @param {?number} count\n   */\n\n  /**\n   * Callback-version of {@link Datastore#countAsync}.\n   * @param {query} query\n   * @param {Datastore~countCallback} [callback]\n   * @return {Cursor<number>|undefined}\n   * @see Datastore#countAsync\n   */\n  count (query, callback) {\n    const cursor = this.countAsync(query)\n\n    if (typeof callback === 'function') callbackify(cursor.execAsync.bind(cursor))(callback)\n    else return cursor\n  }\n\n  /**\n   * Count all documents matching the query.\n   * @param {query} query MongoDB-style query\n   * @return {Cursor<number>} count\n   * @async\n   */\n  countAsync (query) {\n    return new Cursor(this, query, docs => docs.length)\n  }\n\n  /**\n   * Callback version of {@link Datastore#findAsync}.\n   * @param {query} query\n   * @param {projection|MultipleDocumentsCallback} [projection = {}]\n   * @param {MultipleDocumentsCallback} [callback]\n   * @return {Cursor<document[]>|undefined}\n   * @see Datastore#findAsync\n   */\n  find (query, projection, callback) {\n    if (arguments.length === 1) {\n      projection = {}\n      // callback is undefined, will return a cursor\n    } else if (arguments.length === 2) {\n      if (typeof projection === 'function') {\n        callback = projection\n        projection = {}\n      } // If not assume projection is an object and callback undefined\n    }\n\n    const cursor = this.findAsync(query, projection)\n\n    if (typeof callback === 'function') callbackify(cursor.execAsync.bind(cursor))(callback)\n    else return cursor\n  }\n\n  /**\n   * Find all documents matching the query.\n   * We return the {@link Cursor} that the user can either `await` directly or use to can {@link Cursor#limit} or\n   * {@link Cursor#skip} before.\n   * @param {query} query MongoDB-style query\n   * @param {projection} [projection = {}] MongoDB-style projection\n   * @return {Cursor<document[]>}\n   * @async\n   */\n  findAsync (query, projection = {}) {\n    const cursor = new Cursor(this, query, docs => docs.map(doc => model.deepCopy(doc)))\n\n    cursor.projection(projection)\n    return cursor\n  }\n\n  /**\n   * @callback Datastore~findOneCallback\n   * @param {?Error} err\n   * @param {document} doc\n   */\n\n  /**\n   * Callback version of {@link Datastore#findOneAsync}.\n   * @param {query} query\n   * @param {projection|SingleDocumentCallback} [projection = {}]\n   * @param {SingleDocumentCallback} [callback]\n   * @return {Cursor<document>|undefined}\n   * @see Datastore#findOneAsync\n   */\n  findOne (query, projection, callback) {\n    if (arguments.length === 1) {\n      projection = {}\n      // callback is undefined, will return a cursor\n    } else if (arguments.length === 2) {\n      if (typeof projection === 'function') {\n        callback = projection\n        projection = {}\n      } // If not assume projection is an object and callback undefined\n    }\n\n    const cursor = this.findOneAsync(query, projection)\n\n    if (typeof callback === 'function') callbackify(cursor.execAsync.bind(cursor))(callback)\n    else return cursor\n  }\n\n  /**\n   * Find one document matching the query.\n   * We return the {@link Cursor} that the user can either `await` directly or use to can {@link Cursor#skip} before.\n   * @param {query} query MongoDB-style query\n   * @param {projection} projection MongoDB-style projection\n   * @return {Cursor<document>}\n   */\n  findOneAsync (query, projection = {}) {\n    const cursor = new Cursor(this, query, docs => docs.length === 1 ? model.deepCopy(docs[0]) : null)\n\n    cursor.projection(projection).limit(1)\n    return cursor\n  }\n\n  /**\n   * See {@link Datastore#updateAsync} return type for the definition of the callback parameters.\n   *\n   * **WARNING:** Prior to 3.0.0, `upsert` was either `true` of falsy (but not `false`), it is now always a boolean.\n   * `affectedDocuments` could be `undefined` when `returnUpdatedDocs` was `false`, it is now `null` in these cases.\n   *\n   * **WARNING:** Prior to 1.8.0, the `upsert` argument was not given, it was impossible for the developer to determine\n   * during a `{ multi: false, returnUpdatedDocs: true, upsert: true }` update if it inserted a document or just updated\n   * it.\n   *\n   * @callback Datastore~updateCallback\n   * @param {?Error} err\n   * @param {number} numAffected\n   * @param {?document[]|?document} affectedDocuments\n   * @param {boolean} upsert\n   * @see {Datastore#updateAsync}\n   */\n\n  /**\n   * Version without the using {@link Datastore~executor} of {@link Datastore#updateAsync}, use it instead.\n   *\n   * @param {query} query\n   * @param {document|update} update\n   * @param {Object} options\n   * @param {boolean} [options.multi = false]\n   * @param {boolean} [options.upsert = false]\n   * @param {boolean} [options.returnUpdatedDocs = false]\n   * @return {Promise<{numAffected: number, affectedDocuments: document[]|document|null, upsert: boolean}>}\n   * @private\n   * @see Datastore#updateAsync\n   */\n  async _updateAsync (query, update, options) {\n    const multi = options.multi !== undefined ? options.multi : false\n    const upsert = options.upsert !== undefined ? options.upsert : false\n\n    // If upsert option is set, check whether we need to insert the doc\n    if (upsert) {\n      const cursor = new Cursor(this, query)\n\n      // Need to use an internal function not tied to the executor to avoid deadlock\n      const docs = await cursor.limit(1)._execAsync()\n\n      if (docs.length !== 1) {\n        let toBeInserted\n\n        try {\n          model.checkObject(update)\n          // updateQuery is a simple object with no modifier, use it as the document to insert\n          toBeInserted = update\n        } catch (e) {\n          // updateQuery contains modifiers, use the find query as the base,\n          // strip it from all operators and update it according to updateQuery\n          toBeInserted = model.modify(model.deepCopy(query, true), update)\n        }\n        const newDoc = await this._insertAsync(toBeInserted)\n        return { numAffected: 1, affectedDocuments: newDoc, upsert: true }\n      }\n    }\n    // Perform the update\n    let numReplaced = 0\n    let modifiedDoc\n    const modifications = []\n    let createdAt\n\n    const candidates = await this._getCandidatesAsync(query)\n    // Preparing update (if an error is thrown here neither the datafile nor\n    // the in-memory indexes are affected)\n    for (const candidate of candidates) {\n      if (model.match(candidate, query) && (multi || numReplaced === 0)) {\n        numReplaced += 1\n        if (this.timestampData) { createdAt = candidate.createdAt }\n        modifiedDoc = model.modify(candidate, update)\n        if (this.timestampData) {\n          modifiedDoc.createdAt = createdAt\n          modifiedDoc.updatedAt = new Date()\n        }\n        modifications.push({ oldDoc: candidate, newDoc: modifiedDoc })\n      }\n    }\n\n    // Change the docs in memory\n    this._updateIndexes(modifications)\n\n    // Update the datafile\n    const updatedDocs = modifications.map(x => x.newDoc)\n    await this.persistence.persistNewStateAsync(updatedDocs)\n    if (!options.returnUpdatedDocs) return { numAffected: numReplaced, upsert: false, affectedDocuments: null }\n    else {\n      let updatedDocsDC = []\n      updatedDocs.forEach(doc => { updatedDocsDC.push(model.deepCopy(doc)) })\n      if (!multi) updatedDocsDC = updatedDocsDC[0]\n      return { numAffected: numReplaced, affectedDocuments: updatedDocsDC, upsert: false }\n    }\n  }\n\n  /**\n   * Callback version of {@link Datastore#updateAsync}.\n   * @param {query} query\n   * @param {document|*} update\n   * @param {Object|Datastore~updateCallback} [options|]\n   * @param {boolean} [options.multi = false]\n   * @param {boolean} [options.upsert = false]\n   * @param {boolean} [options.returnUpdatedDocs = false]\n   * @param {Datastore~updateCallback} [callback]\n   * @see Datastore#updateAsync\n   *\n   */\n  update (query, update, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    const _callback = (err, res = {}) => {\n      if (callback) callback(err, res.numAffected, res.affectedDocuments, res.upsert)\n    }\n    callbackify((query, update, options) => this.updateAsync(query, update, options))(query, update, options, _callback)\n  }\n\n  /**\n   * Update all docs matching query.\n   * @param {query} query is the same kind of finding query you use with `find` and `findOne`.\n   * @param {document|*} update specifies how the documents should be modified. It is either a new document or a\n   * set of modifiers (you cannot use both together, it doesn't make sense!). Using a new document will replace the\n   * matched docs. Using a set of modifiers will create the fields they need to modify if they don't exist, and you can\n   * apply them to subdocs. Available field modifiers are `$set` to change a field's value, `$unset` to delete a field,\n   * `$inc` to increment a field's value and `$min`/`$max` to change field's value, only if provided value is\n   * less/greater than current value. To work on arrays, you have `$push`, `$pop`, `$addToSet`, `$pull`, and the special\n   * `$each` and `$slice`.\n   * @param {Object} [options = {}] Optional options\n   * @param {boolean} [options.multi = false] If true, can update multiple documents\n   * @param {boolean} [options.upsert = false] If true, can insert a new document corresponding to the `update` rules if\n   * your `query` doesn't match anything. If your `update` is a simple object with no modifiers, it is the inserted\n   * document. In the other case, the `query` is stripped from all operator recursively, and the `update` is applied to\n   * it.\n   * @param {boolean} [options.returnUpdatedDocs = false] (not Mongo-DB compatible) If true and update is not an upsert,\n   * will return the array of documents matched by the find query and updated. Updated documents will be returned even\n   * if the update did not actually modify them.\n   * @return {Promise<{numAffected: number, affectedDocuments: document[]|document|null, upsert: boolean}>}\n   * - `upsert` is `true` if and only if the update did insert a document, **cannot be true if `options.upsert !== true`**.\n   * - `numAffected` is the number of documents affected by the update or insertion (if `options.multi` is `false` or `options.upsert` is `true`, cannot exceed `1`);\n   * - `affectedDocuments` can be one of the following:\n   *    - If `upsert` is `true`, the inserted document;\n   *    - If `options.returnUpdatedDocs` is `false`, `null`;\n   *    - If `options.returnUpdatedDocs` is `true`:\n   *      - If `options.multi` is `false`, the updated document;\n   *      - If `options.multi` is `true`, the array of updated documents.\n   * @async\n   */\n  updateAsync (query, update, options = {}) {\n    return this.executor.pushAsync(() => this._updateAsync(query, update, options))\n  }\n\n  /**\n   * @callback Datastore~removeCallback\n   * @param {?Error} err\n   * @param {?number} numRemoved\n   */\n\n  /**\n   * Internal version without using the {@link Datastore#executor} of {@link Datastore#removeAsync}, use it instead.\n   *\n   * @param {query} query\n   * @param {object} [options]\n   * @param {boolean} [options.multi = false]\n   * @return {Promise<number>}\n   * @private\n   * @see Datastore#removeAsync\n   */\n  async _removeAsync (query, options = {}) {\n    const multi = options.multi !== undefined ? options.multi : false\n\n    const candidates = await this._getCandidatesAsync(query, true)\n    const removedDocs = []\n    let numRemoved = 0\n\n    candidates.forEach(d => {\n      if (model.match(d, query) && (multi || numRemoved === 0)) {\n        numRemoved += 1\n        removedDocs.push({ $$deleted: true, _id: d._id })\n        this._removeFromIndexes(d)\n      }\n    })\n\n    await this.persistence.persistNewStateAsync(removedDocs)\n    return numRemoved\n  }\n\n  /**\n   * Callback version of {@link Datastore#removeAsync}.\n   * @param {query} query\n   * @param {object|Datastore~removeCallback} [options={}]\n   * @param {boolean} [options.multi = false]\n   * @param {Datastore~removeCallback} [cb = () => {}]\n   * @see Datastore#removeAsync\n   */\n  remove (query, options, cb) {\n    if (typeof options === 'function') {\n      cb = options\n      options = {}\n    }\n    const callback = cb || (() => {})\n    callbackify((query, options) => this.removeAsync(query, options))(query, options, callback)\n  }\n\n  /**\n   * Remove all docs matching the query.\n   * @param {query} query MongoDB-style query\n   * @param {object} [options={}] Optional options\n   * @param {boolean} [options.multi = false] If true, can update multiple documents\n   * @return {Promise<number>} How many documents were removed\n   * @async\n   */\n  removeAsync (query, options = {}) {\n    return this.executor.pushAsync(() => this._removeAsync(query, options))\n  }\n}\n\nmodule.exports = Datastore\n", "const Datastore = require('./lib/datastore')\n\nmodule.exports = Datastore\n", "const OriginalCursor = require('@seald-io/nedb/lib/cursor');\n\n/**\n * @class\n */\nclass Cursor {\n    constructor(datastore, op, ...args) {\n        const cursor = datastore.__original[op](...args);\n        if (!(cursor instanceof OriginalCursor)) {\n            throw new TypeError(`Unexpected ${typeof original}, expected: Cursor (nedb/lib/cursor)`);\n        }\n\n        Object.defineProperties(this, {\n            __original: {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: cursor,\n            },\n\n            __datastore: {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: datastore,\n            },\n\n            __op: {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: op,\n            },\n\n            __args: {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: args,\n            },\n        });\n    }\n\n    /**\n     * Sort the queried documents.\n     *\n     * See: https://github.com/louischatriot/nedb#sorting-and-paginating\n     * \n     * @return {Cursor}\n     */\n    sort(...args) {\n        this.__original.sort(...args);\n        return this;\n    }\n\n    /**\n     * Skip some of the queried documents.\n     *\n     * See: https://github.com/louischatriot/nedb#sorting-and-paginating\n     * \n     * @return {Cursor}\n     */\n    skip(...args) {\n        this.__original.skip(...args);\n        return this;\n    }\n\n    /**\n     * Limit the queried documents.\n     *\n     * See: https://github.com/louischatriot/nedb#sorting-and-paginating\n     * \n     * @return {Cursor}\n     */\n    limit(...args) {\n        this.__original.limit(...args);\n        return this;\n    }\n\n    /**\n     * Set the document projection.\n     * \n     * See: https://github.com/louischatriot/nedb#projections\n     * \n     * @return {Cursor}\n     */\n    project(...args) {\n        this.__original.projection(...args);\n        return this;\n    }\n\n    /**\n     * Execute the cursor.\n     *\n     * Since the Cursor has a `then` and a `catch` method\n     * JavaScript identifies it as a thenable object\n     * thus you can await it in async functions.\n     *\n     * @example\n     * // in an async function\n     * await datastore.find(...)\n     *  .sort(...)\n     *  .limit(...)\n     *\n     * @example\n     * // the previous is the same as:\n     * await datastore.find(...)\n     *  .sort(...)\n     *  .limit(...)\n     *  .exec()\n     * \n     * @return {Promise<Object[]>}\n     */\n    async exec() {\n        await this.__datastore.load();\n        try {\n            const result = await this.__original.execAsync();\n            this.__datastore.broadcastSuccess(this.__op, result, ...this.__args);\n            return result;\n        } catch (error) {\n            this.__datastore.broadcastError(this.__op, error, ...this.__args);\n            throw error;\n        }\n    }\n\n    /**\n     * Execute the cursor and set promise callbacks.\n     * \n     * For more information visit:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n     * \n     * @param  {Function} fulfilled\n     * @param  {Function} [rejected]\n     * @return {Promise}\n     */\n    then(fulfilled, rejected) {\n        return this.exec().then(fulfilled, rejected);\n    }\n\n    /**\n     * Execute the cursor and set promise error callback.\n     *\n     * For more information visit:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n     * \n     * @param  {Function} rejected\n     * @return {Promise}\n     */\n    catch(rejected) {\n        return this.exec().catch(rejected);\n    }\n}\n\nmodule.exports = Cursor;\n", "const EventEmitter = require('events');\nconst OriginalDatastore = require('@seald-io/nedb');\nconst Cursor = require('./Cursor');\n\n/**\n * @summary\n * As of v2.0.0 the Datastore class extends node's built \n * in EventEmitter class and implements each method as an event\n * plus additional error events. It also inherits the `compaction.done`\n * event from nedb but for consistency, in this library the event\n * was renamed to `compactionDone`.\n *\n * All event callbacks will be passed the same type of values,\n * the first being the datastore, then the operation result (if there is any)\n * and then the arguments of the called method. (Check out the first example!)\n *\n * All events have a matching error event that goes by the name of `${method}Error`,\n * for example `findError` or `loadError`. The callbacks of these events will receive\n * the same parameters as the normal event handlers except that instead of the \n * operation result there will be an operation error. (Check out the second example!)\n *\n * A generic `__error__` event is also available. This event will be emitted at any of\n * the above error events. The callbacks of this event will receive the same parameters\n * as the specific error event handlers except that there will be one more parameter \n * passed between the datastore and the error object, that being the name of the method\n * that failed. (Check out the third example!)\n *\n * @example\n * let datastore = Datastore.create()\n * datastore.on('update', (datastore, result, query, update, options) => {\n * })\n * datastore.on('load', (datastore) => {\n *     // this event doesn't have a result\n * })\n * datastore.on('ensureIndex', (datastore, options) => {\n *     // this event doesn't have a result\n *     // but it has the options argument which will be passed to the\n *     // event handlers\n * })\n * datastore.on('compactionDone', (datastore) => {\n *     // inherited from nedb's compaction.done event\n * })\n *\n * @example\n * let datastore = Datastore.create()\n * datastore.on('updateError', (datastore, error, query, update, options) => {\n * })\n * datastore.on('loadError', (datastore, error) => {\n * })\n * datastore.on('ensureIndexError', (datastore, error, options) => {\n * })\n *\n * @example\n * let datastore = Datastore.create()\n * datastore.on('__error__', (datastore, event, error, ...args) => {\n *     // for example\n *     // datastore, 'find', error, [{ foo: 'bar' }, {}]\n * })\n * \n * @class\n */\nclass Datastore extends EventEmitter {\n    /**\n     * Create a database instance.\n     *\n     * Use this over `new Datastore(...)` to access\n     * original nedb datastore properties, such as\n     * `datastore.persistence`.\n     *\n     * Note that this method only creates the `Datastore`\n     * class instance, not the datastore file itself.\n     * The file will only be created once an operation\n     * is issued against the datastore or if you call\n     * the `load` instance method explicitly.\n     * \n     * The path (if specified) will be relative to `process.cwd()`\n     * (unless an absolute path was passed).\n     *\n     * For more information visit:\n     * https://github.com/louischatriot/nedb#creatingloading-a-database\n     * \n     * @param  {string|Object} [pathOrOptions]\n     * @return {Proxy<static>}\n     */\n    static create(pathOrOptions) {\n        return new Proxy(new this(pathOrOptions), {\n            get(target, key) {\n                return target[key]\n                    ? target[key]\n                    : target.__original[key];\n            },\n\n            set(target, key, value) {\n                return Object.prototype.hasOwnProperty.call(target.__original, key)\n                    ? (target.__original[key] = value)\n                    : (target[key] = value);\n            },\n        });\n    }\n\n    /**\n     * Datastore constructor...\n     *\n     * You should use `Datastore.create(...)` instead\n     * of `new Datastore(...)`. With that you can access\n     * the original datastore's properties such as `datastore.persistence`.\n     *\n     * Create a Datastore instance.\n     * \n     * Note that the datastore will be created\n     * relative to `process.cwd()`\n     * (unless an absolute path was passed).\n     * \n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#creatingloading-a-database\n     * \n     * @param  {string|Object} [pathOrOptions]\n     * @return {static}\n     */\n    constructor(pathOrOptions) {\n        super();\n\n        const datastore = new OriginalDatastore(\n            typeof pathOrOptions === 'string'\n                ? { filename: pathOrOptions }\n                : pathOrOptions,\n        );\n\n        Object.defineProperties(this, {\n            __loaded: {\n                enumerable: false,\n                writable: true,\n                value: null,\n            },\n\n            __original: {\n                configurable: true,\n                enumerable: false,\n                writable: false,\n                value: datastore,\n            },\n        });\n\n        this.__original.on('compaction.done', () => {\n            this.emit('compactionDone', this);\n        });\n    }\n\n    /**\n     * Load the datastore.\n     *\n     * Note that you don't necessarily have to call\n     * this method to load the datastore as it will\n     * automatically be called and awaited on any\n     * operation issued against the datastore\n     * (i.e.: `find`, `findOne`, etc.).\n     * \n     * @return {Promise<undefined>}\n     */\n    load() {\n        if ( ! (this.__loaded instanceof Promise)) {\n            this.__loaded = this.__original.loadDatabaseAsync()\n                .then(() => this.broadcastSuccess('load'))\n                .catch((error) => { this.broadcastError('load', error); throw error; });\n        }\n\n        return this.__loaded;\n    }\n\n    /**\n     * Find documents that match the specified `query`.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#finding-documents\n     *\n     * There are differences minor in how the cursor works though.\n     *\n     * @example\n     * datastore.find({ ... }).sort({ ... }).exec().then(...)\n     *\n     * @example\n     * datastore.find({ ... }).sort({ ... }).then(...)\n     *\n     * @example\n     * // in an async function\n     * await datastore.find({ ... }).sort({ ... })\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [projection]\n     * @return {Cursor}\n     */\n    find(query = {}, projection) {\n        if (typeof projection === 'function') {\n            projection = {};\n        }\n\n        return new Cursor(this, 'find', query, projection);\n    }\n\n    /**\n     * Find a document that matches the specified `query`.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#finding-documents\n     *\n     * @example\n     * datastore.findOne({ ... }).then(...)\n     *\n     * @example\n     * // in an async function\n     * await datastore.findOne({ ... }).sort({ ... })\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [projection]\n     * @return {Cursor}\n     */\n    findOne(query = {}, projection) {\n        if (typeof projection === 'function') {\n            projection = {};\n        }\n\n        return new Cursor(this, 'findOne', query, projection);\n    }\n\n    /**\n     * Insert a document or documents.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#inserting-documents\n     * \n     * @param  {Object|Object[]} docs\n     * @return {Promise<Object|Object[]>}\n     */\n    async insert(docs) {\n        await this.load();\n        try {\n            const result = await this.__original.insertAsync(docs);\n            this.broadcastSuccess('insert', docs);\n            return result;\n        } catch (error) {\n            this.broadcastError('insert', error, docs);\n            throw error;\n        }\n    }\n\n    /**\n     * Insert a single document.\n     *\n     * This is just an alias for `insert` with object destructuring\n     * to ensure a single document.\n     * \n     * @param  {Object} doc\n     * @return {Promise<Object>}\n     */\n    insertOne({ ...doc }) {\n        return this.insert(doc);\n    }\n\n    /**\n     * Insert multiple documents.\n     *\n     * This is just an alias for `insert` with array destructuring\n     * to ensure multiple documents.\n     * \n     * @param  {Object[]} docs\n     * @return {Promise<Object[]>}\n     */\n    insertMany([...docs]) {\n        return this.insert(docs);\n    }\n\n    /**\n     * Update documents that match the specified `query`.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#updating-documents\n     *\n     * If you set `options.returnUpdatedDocs`,\n     * the returned promise will resolve with\n     * an object (if `options.multi` is `false`) or\n     * with an array of objects.\n     * \n     * @param  {Object} query\n     * @param  {Object} update\n     * @param  {Object} [options]\n     * @return {Promise<number|Object|Object[]>}\n     */\n    async update(query, update, options = {}) {\n        await this.load();\n        try {\n            const { numAffected, affectedDocuments } = await this.__original.updateAsync(query, update, options);\n            const result = options.returnUpdatedDocs ? affectedDocuments : numAffected;\n            this.broadcastSuccess('update', result, query, update, options);\n            return result;\n        } catch (error) {\n            this.broadcastError('update', error, query, update, options);\n            throw error;\n        }\n    }\n\n    /**\n     * Update a single document that matches the specified `query`.\n     *\n     * This is just an alias for `update` with `options.multi` set to `false`.\n     * \n     * @param  {Object} query\n     * @param  {Object} update\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number|Object>}\n     */\n    updateOne(query, update, options = {}) {\n        return this.update(query, update, { ...options, multi: false });\n    }\n\n    /**\n     * Update multiple documents that match the specified `query`.\n     *\n     * This is just an alias for `update` with `options.multi` set to `true`.\n     *\n     * @param  {Object} query\n     * @param  {Object} update\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number|Object[]>}\n     */\n    updateMany(query, update, options = {}) {\n        return this.update(query, update, { ...options, multi: true });\n    }\n\n    /**\n     * Remove documents that match the specified `query`.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#removing-documents\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [options]\n     * @return {Promise<number>}\n     */\n    async remove(query = {}, options = {}) {\n        await this.load();\n        try {\n            const result = await this.__original.removeAsync(query, options);\n            this.broadcastSuccess('remove', result, query, options);\n            return result;\n        } catch (error) {\n            this.broadcastError('remove', error, query, options);\n            throw error;\n        }\n    }\n\n    /**\n     * Remove the first document that matches the specified `query`.\n     *\n     * This is just an alias for `remove` with `options.multi` set to `false`.\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number>}\n     */\n    removeOne(query, options = {}) {\n        return this.remove(query, { ...options, multi: false });\n    }\n\n    /**\n     * Remove all documents that match the specified `query`.\n     *\n     * This is just an alias for `remove` with `options.multi` set to `true`.\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number>}\n     */\n    removeMany(query, options = {}) {\n        return this.remove(query, { ...options, multi: true });\n    }\n\n    /**\n     * Remove the first document that matches the specified `query`.\n     *\n     * This is just an alias for `removeOne`.\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number>}\n     */\n    deleteOne(query, options) {\n        return this.removeOne(query, options);\n    }\n\n    /**\n     * Remove all documents that match the specified `query`.\n     *\n     * This is just an alias for `removeMany`.\n     * \n     * @param  {Object} [query]\n     * @param  {Object} [options]\n     * \n     * @return {Promise<number>}\n     */\n    deleteMany(query, options) {\n        return this.removeMany(query, options);\n    }\n\n    /**\n     * Count documents matching the specified `query`.\n     *\n     * It's basically the same as the original:\n     * https://github.com/louischatriot/nedb#counting-documents\n     *\n     * @example\n     * datastore.count({ ... }).limit(...).then(...)\n     *\n     * @example\n     * // in an async function\n     * await datastore.count({ ... })\n     * // or\n     * await datastore.count({ ... }).sort(...).limit(...)\n     * \n     * @param  {Object} [query]\n     * @return {Cursor}\n     */\n    count(query = {}) {\n        return new Cursor(this, 'count', query);\n    }\n\n    /**\n     * https://github.com/louischatriot/nedb#indexing\n     * \n     * @param  {Object} options\n     * @return {Promise<undefined>}\n     */\n    async ensureIndex(options) {\n        try {\n            const result = await this.__original.ensureIndexAsync(options);\n            this.broadcastSuccess('ensureIndex', result, options);\n            return result;\n        } catch (error) {\n            this.broadcastError('ensureIndex', error, options);\n            throw error;\n        }\n    }\n\n    /**\n     * https://github.com/louischatriot/nedb#indexing\n     * \n     * @param  {string} field\n     * @return {Promise<undefined>}\n     */\n    async removeIndex(field) {\n        try {\n            const result = await this.__original.removeIndexAsync(field);\n            this.broadcastSuccess('removeIndex', result, field);\n            return result;\n        } catch (error) {\n            this.broadcastError('removeIndex', error, field);\n            throw error;\n        }\n    }\n\n    /**\n     * Broadcasts operation success messages.\n     * \n     * @param  {string} op\n     * @param  {*}      result\n     * @param  {...*}   args\n     * \n     * @return {undefined}\n     * @private\n     */\n    broadcastSuccess(op, result, ...args) {\n        this.emit(op, this, result, ...args);\n        return this;\n    }\n\n    /**\n     * Broadcasts operation error messages.\n     * \n     * @param  {string} op\n     * @param  {Error}  error\n     * @param  {...*}   args\n     * \n     * @return {undefined}\n     * @private\n     */\n    broadcastError(op, error, ...args) {\n        this.emit(`${op}Error`, this, error, ...args);\n        this.emit('__error__', this, op, error, ...args);\n        return this;\n    }\n}\n\nmodule.exports = Datastore;\n", "module.exports = require('./src/Datastore');\n"],
  "mappings": "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",
  "names": ["obj", "field", "value", "keys", "require_customUtils", "define", "module", "exports", "o", "e", "n", "global", "Promise", "self", "i", "key", "length", "idb", "forage", "value", "err", "keys", "db", "t", "error", "resolve", "reject", "sameValue", "includes", "LocalForage", "configureMissingMethods", "methodNotImplementedFactory", "promise", "setDriverSupport", "supportedDrivers", "query", "update", "options"]
}
